<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Baco&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-07T14:46:05.712Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Baco</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell基本语法</title>
    <link href="http://yoursite.com/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2020-06-01T09:39:18.000Z</published>
    <updated>2020-06-07T14:46:05.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Shell概述"><a href="#一、Shell概述" class="headerlink" title="一、Shell概述"></a>一、Shell概述</h1><p>弱类型语言</p><h2 id="1、Shell是什么"><a href="#1、Shell是什么" class="headerlink" title="1、Shell是什么"></a>1、Shell是什么</h2><ol><li>shell字面意思：壳，核：操作系统，shell是保护操作系统的</li><li>计算机操作系统只能识别0和1组成的机器码，通过GUI|CLI来间接操作操作系统。GUI（图形化界面）|CLI（命令行）在用户与操作系统之间，相当于桥梁，结构上看，GUI和CLI保护操作系统 </li><li>GUI与CLI就是通过shell实现的</li></ol><h2 id="2、Shell怎么用"><a href="#2、Shell怎么用" class="headerlink" title="2、Shell怎么用"></a>2、Shell怎么用</h2><h3 id="2-1、流程"><a href="#2-1、流程" class="headerlink" title="2.1、流程"></a>2.1、流程</h3><ul><li>步骤1、创建一个后缀名是.sh的文本文档</li><li>步骤2、在文本文件中录入一个命令（第一行固定格式 #! /bin/bash，指用bin目录下的bash解释）如：echo “xxxx”在命令行模式下直接输出数据</li><li>步骤3、执行 .sh 文件（shell脚本，在shell脚本里面放一些DOS命令，执行shell脚本相当于在命令行中执行DOS命令）<ul><li>sh（bash）shell文件</li><li>绝对路径（/xxx/yyy/abc.sh）或相对路径（./abc.sh）注意：<strong>执行命令前修改权限</strong> chmod 777 abc.sh</li><li>source abc.sh（source相当于 ./）</li></ul></li></ul><h3 id="2-2、练习"><a href="#2-2、练习" class="headerlink" title="2.2、练习"></a>2.2、练习</h3><ul><li>在命令行输出当前所在目录<ul><li>创建文本文档test.sh</li><li>在文档中输入固定格式+命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure></li><li>执行<ul><li><code>sh test.sh</code></li><li><code>chmod 777 test.sh</code><br><code>/home/xxx/test01_pwd.sh</code> 或 <code>./test.sh</code></li><li><code>source test.sh</code> </li></ul></li></ul></li></ul><h1 id="二、Shell语法"><a href="#二、Shell语法" class="headerlink" title="二、Shell语法"></a>二、Shell语法</h1><h2 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h2><p>注释是程序中非功能性说明文本,增强程度的易读性，易维护性</p><h3 id="1-1、单行注释"><a href="#1-1、单行注释" class="headerlink" title="1.1、单行注释"></a>1.1、单行注释</h3><p>格式：#注释文本</p><h3 id="1-2、多行注释"><a href="#1-2、多行注释" class="headerlink" title="1.2、多行注释"></a>1.2、多行注释</h3><p>格式：<br>:&lt;&lt;自定义的标记<br>  第一行注释<br>  第二行注释<br>  ……<br>自定义的标记</p><h2 id="2、变量"><a href="#2、变量" class="headerlink" title="2、变量"></a>2、变量</h2><p>程序=数据+数据操作<br>变量就是数据的载体，是因为其中的值可以改变。变量为数据设置一个引用，以后再使用这个数据时，可以通过引用获取数据。</p><h3 id="2-1、变量创建"><a href="#2-1、变量创建" class="headerlink" title="2.1、变量创建"></a>2.1、变量创建</h3><h4 id="2-1-1、格式"><a href="#2-1-1、格式" class="headerlink" title="2.1.1、格式"></a>2.1.1、格式</h4><p>变量名=变量值</p><h4 id="2-1-2、注意事项"><a href="#2-1-2、注意事项" class="headerlink" title="2.1.2、注意事项"></a>2.1.2、注意事项</h4><ul><li>变量名不能数字开头</li><li>变量名不能有空格这种特殊字符</li><li>起名做到见名知意</li><li>变量名不要使用关键字</li><li>赋值符号 <strong>=</strong>左右两侧不要有空格</li><li>变量值可以不使用引号，但是如果有空格，必须使用 “ “ 或 ‘ ‘</li><li>“ “ 和 ‘ ‘的区别：变量之间赋值时，如果是” “，那么赋的是变量的值；如果是’ ‘，那么是指赋值调用格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&quot;abc&quot;</span><br><span class="line">name2&#x3D;&quot;$&#123;name&#125;&quot;</span><br><span class="line">name3&#x3D;&#39;$&#123;name&#125;&#39;</span><br><span class="line">echo &quot;$&#123;name2&#125;&quot;  &#x2F;&#x2F;输出abc</span><br><span class="line">echo &quot;$&#123;name3&#125;&quot;  &#x2F;&#x2F;输出$&#123;name&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2、变量查询"><a href="#2-2、变量查询" class="headerlink" title="2.2、变量查询"></a>2.2、变量查询</h3><h4 id="2-2-1、格式"><a href="#2-2-1、格式" class="headerlink" title="2.2.1、格式"></a>2.2.1、格式</h4><p>标准格式：”${变量名}”<br>其他格式：${变量名} 或 $变量名</p><h3 id="2-3、变量修改"><a href="#2-3、变量修改" class="headerlink" title="2.3、变量修改"></a>2.3、变量修改</h3><h4 id="2-3-3、格式"><a href="#2-3-3、格式" class="headerlink" title="2.3.3、格式"></a>2.3.3、格式</h4><p>变量名=变量值</p><h3 id="2-4、变量删除"><a href="#2-4、变量删除" class="headerlink" title="2.4、变量删除"></a>2.4、变量删除</h3><h4 id="2-4-1、格式"><a href="#2-4-1、格式" class="headerlink" title="2.4.1、格式"></a>2.4.1、格式</h4><p>unset 变量名</p><h3 id="2-5、变量分类"><a href="#2-5、变量分类" class="headerlink" title="2.5、变量分类"></a>2.5、变量分类</h3><h4 id="2-5-1、本地-局部变量"><a href="#2-5-1、本地-局部变量" class="headerlink" title="2.5.1、本地/局部变量"></a>2.5.1、本地/局部变量</h4><p>只有当前shell可以使用的变量</p><h4 id="2-5-2、全局-静态变量"><a href="#2-5-2、全局-静态变量" class="headerlink" title="2.5.2、全局/静态变量"></a>2.5.2、全局/静态变量</h4><ul><li>是被多个shell共享的变量</li><li>如何将本地变量转换成全局变量？<ul><li>格式：export 局部变量</li><li>思想：将本地变量设置为全局变量，就是将本地变量导出到共享空间</li></ul></li><li>查询全局变量：env</li></ul><p>注意1：如果是全局变量，建议变量名所有字母都大写<br>注意2：全局变量要慎用</p><h4 id="2-5-3、内置变量（特殊变量）"><a href="#2-5-3、内置变量（特殊变量）" class="headerlink" title="2.5.3、内置变量（特殊变量）"></a>2.5.3、内置变量（特殊变量）</h4><ul><li><p>编写shell动态获取某个目录下的子级。实现流程：</p><ul><li>shell调用时，可以传入要操作的目录。格式：sh abc.sh 要操作的目录（如：<code>sh var01_inner.sh /home/test</code>）</li><li>shell执行时，可以获取调用时传入的目录。格式：ls $1（代表传入的第一个参数）<br>上述流程其实就是<strong>传参以及参数解析</strong>的过程，这个参数就可以称之为内置变量</li></ul></li><li><p>语法总结：</p><ul><li>应用场景：程序执行时有些数据是可变的，调用脚本时，传入这些可变数据，脚本中解析获取</li><li>调用格式：sh xxx.sh 参数1 参数2 参数3 ……</li><li>解析格式：$N 获取第N个参数</li><li>优点：动态传值，更灵活</li><li>注意：$N获取第N个参数，但是N最大就到9（若脚本中写$10，这里0为字符串，表示获取第1个参数的值+0，而不是获取第10位参数）<ul><li>$0获取脚本文件名 var02_inner.sh</li><li>$*获取所有参数</li><li>$#获取参数个数</li></ul></li></ul></li><li><p>test.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#ls $1</span><br><span class="line">echo &quot;第一个参数：$1&quot;</span><br><span class="line">echo &quot;第二个参数：$2&quot;</span><br><span class="line">echo &quot;第三个参数：$3&quot;</span><br><span class="line">echo &quot;文件名：$0&quot;</span><br><span class="line">echo &quot;所有参数：$*&quot;</span><br><span class="line">echo &quot;参数个数：$#&quot;</span><br></pre></td></tr></table></figure><p>执行：<code>sh test.sh 1 2 3 4</code></p><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%8A%A8%E6%80%81%E4%BC%A0%E5%80%BC.png" class="" title="Shell输出"></li></ul><h4 id="2-5-4、读取键盘录入"><a href="#2-5-4、读取键盘录入" class="headerlink" title="2.5.4、读取键盘录入"></a>2.5.4、读取键盘录入</h4><ul><li>编写shell动态获取某个目录下的子级（目录不一定，要让调用者指定）<ul><li>格式：read    –p    “提示语句:”    变量名</li><li>作用：执行到此时，程序挂起，等待用户录入数据，录入数据后，回车，录入的数据会赋值给变量</li><li>优点：<strong>动态获取数据</strong>，更灵活</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1.用户录入目录</span><br><span class="line">read-p &quot;请您输入一个目录：&quot; myDir</span><br><span class="line">#2.获取目录子集</span><br><span class="line">ls &quot;$&#123;myDir&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="2-6、变量特殊赋值"><a href="#2-6、变量特殊赋值" class="headerlink" title="2.6、变量特殊赋值"></a>2.6、变量特殊赋值</h3><ul><li>将某个命令的结果赋值给一个变量<ul><li>格式：变量名=`命令`</li></ul></li></ul><h3 id="2-7、练习"><a href="#2-7、练习" class="headerlink" title="2.7、练习"></a>2.7、练习</h3><h4 id="2-7-1、练习1"><a href="#2-7-1、练习1" class="headerlink" title="2.7.1、练习1"></a>2.7.1、练习1</h4><ul><li>使用shell脚本，将当前所在的目录赋值给一个变量并打印出来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 将pwd命令的结果赋值给一个变量</span><br><span class="line">result&#x3D;&#96;pwd&#96;</span><br><span class="line">echo &quot;$&#123;result&#125;&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-7-2、练习2"><a href="#2-7-2、练习2" class="headerlink" title="2.7.2、练习2"></a>2.7.2、练习2</h4><ul><li>计算/etc目录下有多少个文件，用shell脚本实现<ul><li>新知识点：获取某个目录下子级个数。格式：ls 目录 | wc –l<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#获取shell02目录下子级的个数</span><br><span class="line">count&#x3D;&#96;ls &#x2F;home&#x2F;shell&#x2F;shell02 | wc -l&#96;</span><br><span class="line">echo &quot;shell02目录下子级的个数：$&#123;count&#125;&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-7-3、练习3"><a href="#2-7-3、练习3" class="headerlink" title="2.7.3、练习3"></a>2.7.3、练习3</h4><ul><li>实现统计任何指定目录下的文件个数，用shell脚本实现<ul><li>方案一<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 动态获取某个目录，再获取目录下子级的个数</span><br><span class="line"># 读取脚本调用是传入的参数</span><br><span class="line">count&#x3D;&#96;ls $1 | wc -l&#96;</span><br><span class="line">echo &quot;$1目录下的子级个数：$&#123;count&#125;&quot;</span><br></pre></td></tr></table></figure></li><li>方案二<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 读取键盘录入，获取文件夹路径</span><br><span class="line">read -p &quot;请您输入一个目录路径：&quot; myDir</span><br><span class="line">count&#x3D;&#96;ls $&#123;myDir&#125; | wc -l&#96;</span><br><span class="line">echo &quot;$&#123;myDir&#125;下的子级个数是：$&#123;count&#125;&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h2><p>运算符是变量执行运算时使用的一些特殊符号</p><h3 id="3-1、运算符分类"><a href="#3-1、运算符分类" class="headerlink" title="3.1、运算符分类"></a>3.1、运算符分类</h3><h4 id="3-1-1、算数运算符"><a href="#3-1-1、算数运算符" class="headerlink" title="3.1.1、算数运算符"></a>3.1.1、算数运算符</h4><ul><li>格式：$((数学表达式))</li><li>+-*/% 加减乘除取余</li><li>注意：一般计算机语言中除法运算只取商</li></ul><h4 id="3-1-2、比较运算符"><a href="#3-1-2、比较运算符" class="headerlink" title="3.1.2、比较运算符"></a>3.1.2、比较运算符</h4><ul><li>格式：[ 表达式 ]</li><li>注意：[]中有两个空格，两个空格中添加表达式</li><li>返回boolean值（0为true，1为false）</li><li>查看结果：$?</li><li>-gt(&gt;)、-lt(&lt;)、-ge(&gt;=)、-le(&lt;=)、-eq(==)、-ne(!=)<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" class="" title="Shell输出"></li></ul><h4 id="3-1-3、逻辑运算符"><a href="#3-1-3、逻辑运算符" class="headerlink" title="3.1.3、逻辑运算符"></a>3.1.3、逻辑运算符</h4><ul><li>格式：[ 表达式 ]</li><li>返回boolean值（0为true，1为false）</li><li>-a 与、-o 或、! 非<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.png" class="" title="Shell输出"></li></ul><h4 id="3-1-4、字符串比较"><a href="#3-1-4、字符串比较" class="headerlink" title="3.1.4、字符串比较"></a>3.1.4、字符串比较</h4><ul><li>格式：[ 表达式 ]</li><li>返回boolean值（0为true，1为false）</li><li>==判断两个字符串内容是否一样<br>！=判断两个字符串内容是否不一样<br>-z判断单个字符串长度是不是0（判断字符串是不是空）<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83.png" class="" title="Shell输出"></li></ul><h4 id="3-1-5、文件判断"><a href="#3-1-5、文件判断" class="headerlink" title="3.1.5、文件判断"></a>3.1.5、文件判断</h4><ul><li>格式：[ 表达式 ]</li><li>返回boolean值（0为true，1为false）</li><li>-d：判断是不是文件夹<br>-f：判断是不是文件<br>-e：判断是不是存在<br>变体：test –参数 路径 等价于[ -参数 路径 ]<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD1.png" class="" title="Shell输出"><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD2.png" class="" title="Shell输出"><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD3.png" class="" title="Shell输出"></li></ul><h3 id="3-2、练习"><a href="#3-2、练习" class="headerlink" title="3.2、练习"></a>3.2、练习</h3><h4 id="3-2-1、练习1"><a href="#3-2-1、练习1" class="headerlink" title="3.2.1、练习1"></a>3.2.1、练习1</h4><ul><li>判断/home/shell目录是否为空<ul><li>思路：先获取目录自己文件个数，再判断是否大于0<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">count&#x3D;&#96;ls &#x2F;home&#x2F;shell | wc -l&#96;</span><br><span class="line">[ $&#123;count&#125; -gt 0 ]</span><br><span class="line">echo &quot;目录不为空吗：$?&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-2-2、练习2"><a href="#3-2-2、练习2" class="headerlink" title="3.2.2、练习2"></a>3.2.2、练习2</h4><ul><li>通过用户输入任意目录判断是否为空<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入目录：&quot; myDir</span><br><span class="line">count&#x3D;&#96;ls $&#123;myDir&#125; | wc -l&#96;</span><br><span class="line">[ $&#123;count&#125; -gt 0 ]</span><br><span class="line">echo &quot;目录$&#123;myDir&#125;不为空：$?&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4、函数（方法）"><a href="#4、函数（方法）" class="headerlink" title="4、函数（方法）"></a>4、函数（方法）</h2><ul><li>程序=数据+数据操作<br>变量是数据的载体，函数是数据操作的载体，是程序中最小的功能（封装）单元。在函数中一般会封装一个具有特定功能的实现</li><li>代码结构更规整，易维护、易读<br>实现了功能复用</li></ul><h3 id="4-1、函数声明"><a href="#4-1、函数声明" class="headerlink" title="4.1、函数声明"></a>4.1、函数声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[function(可选)] 函数名()&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、函数调用"><a href="#4-2、函数调用" class="headerlink" title="4.2、函数调用"></a>4.2、函数调用</h3><p>函数名</p><h3 id="4-3、注意事项"><a href="#4-3、注意事项" class="headerlink" title="4.3、注意事项"></a>4.3、注意事项</h3><ul><li>函数不调用不执行（所有计算机语言通用）</li><li>顺序上必须先声明再调用（弱类型计算机语言的特点）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 声明函数</span><br><span class="line">hello()&#123;</span><br><span class="line">  echo &quot;hello function&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 调用函数</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4、函数分类"><a href="#4-4、函数分类" class="headerlink" title="4.4、函数分类"></a>4.4、函数分类</h3><h4 id="4-4-1、无参数无返回值"><a href="#4-4-1、无参数无返回值" class="headerlink" title="4.4.1、无参数无返回值"></a>4.4.1、无参数无返回值</h4><h4 id="4-4-2、有参数"><a href="#4-4-2、有参数" class="headerlink" title="4.4.2、有参数"></a>4.4.2、有参数</h4><ul><li><p>声明语法：获取参数使用</p><ul><li>$N：获取第N个参数 ，N必须&lt;=9</li><li>$0：获取脚本文件名</li><li>$*：获取所有参数</li><li>$#：获取参数个数</li></ul></li><li><p>调用语法：参数传递</p><ul><li>函数名 参数1 参数2 ……<br>function02.sh：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 有参数的函数</span><br><span class="line">getSun()&#123;</span><br><span class="line">  echo &quot;两个数字的和：$(($1+$2))&quot;</span><br><span class="line">  echo &quot;第一个参数：$1&quot;</span><br><span class="line">  echo &quot;第二个参数：$2&quot;</span><br><span class="line">  echo &quot;第十个参数：$10&quot; &#x2F;&#x2F;输出结果应该是第一个参数+0</span><br><span class="line">  echo &quot;文件名：$0&quot;</span><br><span class="line">  echo &quot;所有参数：$*&quot;</span><br><span class="line">  echo &quot;参数个数：$#&quot;</span><br><span class="line">&#125;</span><br><span class="line">#函数调用</span><br><span class="line">getSum 4 5 6 7 8 9 1 2 3 a b c</span><br></pre></td></tr></table></figure><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%89%A7%E8%A1%8C%E6%9C%89%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0.png" class="" title="Shell输出"></li></ul></li></ul><h4 id="4-4-3、有返回值"><a href="#4-4-3、有返回值" class="headerlink" title="4.4.3、有返回值"></a>4.4.3、有返回值</h4><ul><li>声明语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数名()&#123;</span><br><span class="line">  …</span><br><span class="line">  return xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>调用语法：<ul><li>函数名</li></ul></li><li>查看结果：$?</li><li>函数的返回值在shell中只有两种<ul><li>0：函数调用正常</li><li>非0：函数执行有误</li></ul></li><li>注意：在shell中，没有函数内作用域，函数内变量result出了函数还能用，不需要将它以返回值的方式返回</li></ul><p>function03.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#带返回值的函数</span><br><span class="line">#函数声明</span><br><span class="line">getSum()&#123;</span><br><span class="line">  result&#x3D;$(($1+$2))</span><br><span class="line">  echo &quot;函数中的result：$&#123;result&#125;&quot;</span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line"># 函数调用</span><br><span class="line">getSum 3 4</span><br><span class="line">echo &quot;函数调用的结果是：$?&quot;</span><br><span class="line">ehco &quot;函数外调用result：$&#123;result&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%89%A7%E8%A1%8C%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0.png" class="" title="Shell输出"><h3 id="4-5、练习"><a href="#4-5、练习" class="headerlink" title="4.5、练习"></a>4.5、练习</h3><h4 id="4-5-1、练习1"><a href="#4-5-1、练习1" class="headerlink" title="4.5.1、练习1"></a>4.5.1、练习1</h4><ul><li>读取键盘录入，录入长方形的长和宽，编写求周长和面积的函数，调用并输出周长和面积的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#读取键盘录入长方形的长和宽</span><br><span class="line">read -p &quot;请输入长方形的长：&quot; length</span><br><span class="line">read -p &quot;请输入长方形的宽：&quot; width</span><br><span class="line"># 编写求周长和面积的函数</span><br><span class="line">getAllLength()&#123;</span><br><span class="line">  echo &quot;周长是$(($1+$2)*2))&quot;</span><br><span class="line">&#125;</span><br><span class="line">getArea()&#123;</span><br><span class="line">  echo &quot;面积是：$(($1*$2))&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 调用函数，传入参数</span><br><span class="line">getAllLength &quot;$&#123;length&#125;&quot; &quot;$&#123;width&#125;&quot;</span><br><span class="line">getArea &quot;$&#123;length&#125;&quot; &quot;$&#123;width&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%87%BD%E6%95%B0%E7%BB%83%E4%B9%A0.png" class="" title="Shell输出"></li></ul><h2 id="5、流程控制"><a href="#5、流程控制" class="headerlink" title="5、流程控制"></a>5、流程控制</h2><p>流程控制就是控制代码的执行顺序，让代码实现分支或循环执行</p><h3 id="5-1、流程控制分类"><a href="#5-1、流程控制分类" class="headerlink" title="5.1、流程控制分类"></a>5.1、流程控制分类</h3><ul><li>分支：if + case</li><li>循环：for + while</li></ul><h3 id="5-2、流程控制分支实现之if"><a href="#5-2、流程控制分支实现之if" class="headerlink" title="5.2、流程控制分支实现之if"></a>5.2、流程控制分支实现之if</h3><h4 id="5-2-1、格式1（单分支）"><a href="#5-2-1、格式1（单分支）" class="headerlink" title="5.2.1、格式1（单分支）"></a>5.2.1、格式1（单分支）</h4><ul><li>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [  boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">  code……</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>练习：录入年龄，判断是否为成年人，如果成年了输出“成年人”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">if [ $&#123;age&#125; -ge 18 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;成年人&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2-2、格式2（双分支）"><a href="#5-2-2、格式2（双分支）" class="headerlink" title="5.2.2、格式2（双分支）"></a>5.2.2、格式2（双分支）</h4><ul><li>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">code……</span><br><span class="line">else</span><br><span class="line">code……</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>练习：录入年龄，判断是否成年人，如果成年人了输出“成年人”，否则输出未成年<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">if [ $&#123;age&#125; -ge 18 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;成年人&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;未成年&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2-3、格式3（多分支）"><a href="#5-2-3、格式3（多分支）" class="headerlink" title="5.2.3、格式3（多分支）"></a>5.2.3、格式3（多分支）</h4><ul><li>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if [ boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">code……</span><br><span class="line">elif [ boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">code……</span><br><span class="line">elif 可以出现多次</span><br><span class="line">else</span><br><span class="line">code……</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>练习：录入年龄，如果小于18岁，输出未成年，如果大于等于18岁，小于等于30岁，输出青年，如果大于30岁小于50岁，输出中年，否则输出老年<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">if [ $&#123;age&#125; -lt 18 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;未成年人&quot;</span><br><span class="line">elif [ $&#123;age&#125; -le 30 ]</span><br><span class="line">then </span><br><span class="line">  echo &quot;青年&quot;</span><br><span class="line">else [ $&#123;age&#125; -lt 50 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;中年&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;老年&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3、if练习"><a href="#5-3、if练习" class="headerlink" title="5.3、if练习"></a>5.3、if练习</h3><h4 id="5-3-1、练习1"><a href="#5-3-1、练习1" class="headerlink" title="5.3.1、练习1"></a>5.3.1、练习1</h4><ul><li>判断用户输入的用户名和密码是否为admin 123456，如果是则提示登录成功，否则提示失败<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入账号：&quot; username</span><br><span class="line">read -p &quot;请输入密码：&quot; password</span><br><span class="line">if [ $&#123;username&#125;&#x3D;&#x3D;&quot;admin&quot; -a $&#123;password&#125;&#x3D;&#x3D;&quot;123456&quot; ]</span><br><span class="line">then  </span><br><span class="line">  echo &quot;登录成功&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;登录失败&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-2、练习2"><a href="#5-3-2、练习2" class="headerlink" title="5.3.2、练习2"></a>5.3.2、练习2</h4><ul><li>输入数字，判断是否大于0，如果大于0则将该数字-1并输出，否则+1输出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入一个数字：&quot; num</span><br><span class="line">if [ $&#123;num&#125; -gt 0 ]</span><br><span class="line">then</span><br><span class="line">  num&#x3D;$(($&#123;num&#125;-1))</span><br><span class="line">  echo &quot;大于0减1后：$&#123;num&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  num&#x3D;$(($&#123;num&#125;+1))</span><br><span class="line">  echo &quot;小于0加1后：$&#123;num&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-3、练习3"><a href="#5-3-3、练习3" class="headerlink" title="5.3.3、练习3"></a>5.3.3、练习3</h4><ul><li>判断用户输入的目录是否存在，如果存在则统计目录下的文件个数，否则提示用户该目录不存在<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1、读取键盘录入的目录</span><br><span class="line">read -p &quot;请您输入一个目录：&quot; myDir </span><br><span class="line">#2、文件判断，如果是目录，统计目录下的文件个数(ls 目录 | wc -l)，否则给出提示</span><br><span class="line">if [ -d $&#123;myDir&#125; ]</span><br><span class="line">then</span><br><span class="line">#统计文件个数</span><br><span class="line">count&#x3D;&#96;ls $&#123;myDir&#125; | wc -l&#96;</span><br><span class="line">echo &quot;$&#123;myDir&#125; 目录下的文件个数是：$&#123;count&#125;&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;您录入的目录不存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-4、练习4"><a href="#5-3-4、练习4" class="headerlink" title="5.3.4、练习4"></a>5.3.4、练习4</h4><ul><li>判断学生的成绩，大于90-100提示优秀80-90之间提示良好，70-80之间则提示一般，60-70之间提示及格，其他则提示不及格<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请您输入学生成绩：&quot; score</span><br><span class="line">if [ $&#123;score&#125; -le 100 -a $&#123;score&#125; -ge 90 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;优秀&quot;</span><br><span class="line">elif [ $&#123;score&#125; -ge 80 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;良好&quot;</span><br><span class="line">elif [ $&#123;score&#125; -ge 70 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;一般&quot;</span><br><span class="line">elif [ $&#123;score&#125; -ge 60 ]</span><br><span class="line">then </span><br><span class="line">echo &quot;及格&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-5、练习5"><a href="#5-3-5、练习5" class="headerlink" title="5.3.5、练习5"></a>5.3.5、练习5</h4><ul><li>判断用户输入的内容是否为空，为空则提示，不为空则判断是否为目录，不为目录判断是否为文件，否则提示错误信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请您录入一个文件或目录路径：&quot; myFile</span><br><span class="line">if [ -z $&#123;myFile&#125; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;录入数据不能为空&quot;</span><br><span class="line">elif [ -d $&#123;myFile&#125; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;录入的路径是文件夹&quot;</span><br><span class="line">elif [ -f $&#123;myFile&#125; ]</span><br><span class="line">then </span><br><span class="line">echo &quot;录入的路径是文件&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;数据有误&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3、流程控制分支实现之case"><a href="#5-3、流程控制分支实现之case" class="headerlink" title="5.3、流程控制分支实现之case"></a>5.3、流程控制分支实现之case</h3><h4 id="5-3-1、格式"><a href="#5-3-1、格式" class="headerlink" title="5.3.1、格式"></a>5.3.1、格式</h4><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">case 变量(用户输入的数据) in</span><br><span class="line">1)</span><br><span class="line">code;;</span><br><span class="line">2)</span><br><span class="line">code;;</span><br><span class="line">3)</span><br><span class="line">code;;</span><br><span class="line">*)</span><br><span class="line">code;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>case也可以执行区间判断，但是区间范围局限于0-9<br>区间格式：[开始数字-结束数字]</p></li><li><p>练习：模拟游戏级别选择，读取键盘录入的数字，如果是数字1，那么输出简单；如果是数字2，那么输出一般；如果是数字3，那么输出困难，其他输出数据有误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入一个数字：&quot; num</span><br><span class="line">case $&#123;num&#125; in</span><br><span class="line">1)</span><br><span class="line">  echo &quot;简单&quot;;;</span><br><span class="line">2)</span><br><span class="line">  echo &quot;一般&quot;;;</span><br><span class="line">3)</span><br><span class="line">  echo &quot;困难&quot;;;</span><br><span class="line">*)</span><br><span class="line">  echo &quot;数据有误&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-2、注意事项"><a href="#5-3-2、注意事项" class="headerlink" title="5.3.2、注意事项"></a>5.3.2、注意事项</h4><ul><li>case能实现的 if elif 也能实现</li><li>if elif 能实现的，case不一定能实现了</li><li>语法上 if elif 更简单</li><li>执行效率高</li></ul><h3 id="5-4、case-练习"><a href="#5-4、case-练习" class="headerlink" title="5.4、case 练习"></a>5.4、case 练习</h3><h4 id="5-4-1、练习1"><a href="#5-4-1、练习1" class="headerlink" title="5.4.1、练习1"></a>5.4.1、练习1</h4><ul><li>输入一个序号，判断该用户选择哪款产品，A：笔记本，B：电饭煲，C：小台灯<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1、读取键盘录入</span><br><span class="line">read -p &quot;请您录入一个编号：&quot; num</span><br><span class="line">#2、使用case执行分支操作</span><br><span class="line">case $&#123;num&#125; in</span><br><span class="line">A)</span><br><span class="line">echo &quot;笔记本&quot;;;</span><br><span class="line">B)</span><br><span class="line">echo &quot;电饭煲&quot;;;</span><br><span class="line">C)</span><br><span class="line">echo &quot;小台灯&quot;;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;数据有误&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-4-2、练习2"><a href="#5-4-2、练习2" class="headerlink" title="5.4.2、练习2"></a>5.4.2、练习2</h4><ul><li>请输入对客服的满意度，【0-3】不满意，【4-6】满意，【7-9】非常满意<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1、读取键盘录入</span><br><span class="line">read -p &quot;请您录入一个数字：&quot; score</span><br><span class="line">#2、使用case执行区间判断</span><br><span class="line">case $&#123;score&#125; in</span><br><span class="line">[0-3])</span><br><span class="line">echo &quot;不满意&quot;;;</span><br><span class="line">[4-6])</span><br><span class="line">echo &quot;满意&quot;;;</span><br><span class="line">[7-10])</span><br><span class="line">echo &quot;非常满意&quot;;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;数据有误&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-5、流程控制循环实现之for"><a href="#5-5、流程控制循环实现之for" class="headerlink" title="5.5、流程控制循环实现之for"></a>5.5、流程控制循环实现之for</h3><h4 id="5-5-1、格式"><a href="#5-5-1、格式" class="headerlink" title="5.5.1、格式"></a>5.5.1、格式</h4><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量名 in 列表(v1 v2 v3……)</span><br><span class="line">do</span><br><span class="line">code……#循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>seq命令优化for循环</p><ul><li>格式1：seq 参数NUM：默认遍历[1-NUM]之间的所有整数</li><li>格式2：seq 参数NUM1 参数NUM2：遍历[NUM1-NUM2]之间的所有整数</li><li>格式3：seq 参数NUM1 参数NUM2 参数NUM3：遍历[NUM1-NUM3]之间的整数，但是每次递增NUM2值。不指定NUM2则每次默认递增1，NUM2又称之为步进值</li></ul></li></ul><h3 id="5-6、for循环练习"><a href="#5-6、for循环练习" class="headerlink" title="5.6、for循环练习"></a>5.6、for循环练习</h3><p>求1-100之间的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#思想：定义一个变量（初始化值是0）接收和</span><br><span class="line">#1、定义一个变量，初始化值是0</span><br><span class="line">sum&#x3D;0</span><br><span class="line">#2、遍历1-100</span><br><span class="line">for ele in &#96;seq 100&#96;</span><br><span class="line">do</span><br><span class="line">sum&#x3D;$(($&#123;sum&#125; + $&#123;ele&#125;))</span><br><span class="line">done</span><br><span class="line">#3、输出变量的值</span><br><span class="line">echo &quot;1-100之间的和是：$&#123;sum&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="5-6、流程控制循环实现之while"><a href="#5-6、流程控制循环实现之while" class="headerlink" title="5.6、流程控制循环实现之while"></a>5.6、流程控制循环实现之while</h3><h4 id="5-6-1、格式"><a href="#5-6-1、格式" class="headerlink" title="5.6.1、格式"></a>5.6.1、格式</h4><ul><li>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ boolean表达式 ]</span><br><span class="line">do</span><br><span class="line">code……</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-7、while循环练习"><a href="#5-7、while循环练习" class="headerlink" title="5.7、while循环练习"></a>5.7、while循环练习</h3><p>求1-100之间的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">sum&#x3D;0</span><br><span class="line">num&#x3D;1</span><br><span class="line">while [ $&#123;num&#125; -le 100 ]</span><br><span class="line">do</span><br><span class="line">  sum&#x3D;$(($&#123;sum&#125;+$&#123;num&#125;))</span><br><span class="line">  num&#x3D;$(($&#123;num&#125;+1))</span><br><span class="line">done</span><br><span class="line">  echo &quot;1-100之间的和是：$&#123;sum&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="5-8、综合练习"><a href="#5-8、综合练习" class="headerlink" title="5.8、综合练习"></a>5.8、综合练习</h3><p>输入一个目录，判断目录是否存在，如果不存在则给出提示，如果存在则提示输入要创建的文件名（前提：要先进入目录）判断创建的文件是否存在，如果不存在，则继续创建，否则提示给文件已经存在。要求：目录操作与文件操作，分别两个函数实现，两个函数中分别实现业务逻辑（分支语句）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#4 创建处理文件的函数</span><br><span class="line">doMyFile()&#123;</span><br><span class="line">echo &quot;文件处理函数被调用了......&quot;</span><br><span class="line">#开始处理</span><br><span class="line">#文件存在，给出提示，不存在，就创建</span><br><span class="line">if [ -f $1 ]</span><br><span class="line">then </span><br><span class="line">echo &quot;文件已经存在了！&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件开始创建&quot;</span><br><span class="line">echo &quot;......&quot;</span><br><span class="line">touch $1</span><br><span class="line">echo &quot;文件创建&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">#3 处理目录的函数</span><br><span class="line">doMyDir()&#123;</span><br><span class="line">#获取传入的目录 $1</span><br><span class="line">#如果不是目录，给出提示，是目录操作文件</span><br><span class="line">if [ -d $1 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;操作文件......&quot;</span><br><span class="line">#1、让用户录入文件名</span><br><span class="line">read -p &quot;请您录入一个文件名：&quot; myFile</span><br><span class="line">#2、进入目录</span><br><span class="line">cd $1</span><br><span class="line">#3、操作文件</span><br><span class="line">doMyFile $&#123;myFile&#125;</span><br><span class="line">else</span><br><span class="line">echo &quot;您录入的不是目录&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">#1 用户录入目录</span><br><span class="line">read -p &quot;请您输入一个目录 &quot; myDir</span><br><span class="line">#2 操作目录(单独一个函数实现)</span><br><span class="line">doMyDir  $&#123;myDir&#125;</span><br></pre></td></tr></table></figure><h3 id="5-9、重定向"><a href="#5-9、重定向" class="headerlink" title="5.9、重定向"></a>5.9、重定向</h3><p>将命令产生的数据保存到磁盘文件。一种序列化（持久化）机制。</p><h4 id="5-9-1、格式1"><a href="#5-9-1、格式1" class="headerlink" title="5.9.1、格式1"></a>5.9.1、格式1</h4><ul><li>命令：1&gt;&gt; 磁盘文件（将正常结果输出到磁盘文件）<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%87%8D%E5%AE%9A%E5%90%91%E8%AF%AD%E6%B3%951.png" class="" title="Shell输出"></li></ul><h4 id="5-9-2、格式2"><a href="#5-9-2、格式2" class="headerlink" title="5.9.2、格式2"></a>5.9.2、格式2</h4><ul><li>命令：2&gt;&gt; 磁盘文件（将错误结果输出到磁盘文件）<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E9%87%8D%E5%AE%9A%E5%90%91%E8%AF%AD%E6%B3%952.png" class="" title="Shell输出"></li></ul><h3 id="5-10、数组"><a href="#5-10、数组" class="headerlink" title="5.10、数组"></a>5.10、数组</h3><p>数组也是变量，但是是特殊的变量，一般变量只能存储一个值，而数组可以存储多个值</p><h4 id="5-10-1、数组创建"><a href="#5-10-1、数组创建" class="headerlink" title="5.10.1、数组创建"></a>5.10.1、数组创建</h4><p>变量名=(值1 值2 值3 ……)</p><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA.png" class="" title="Shell输出"><h4 id="5-10-2、数组查询"><a href="#5-10-2、数组查询" class="headerlink" title="5.10.2、数组查询"></a>5.10.2、数组查询</h4><ul><li><p>${数组名[索引]}   //索引从0开始</p><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%9F%A5%E8%AF%A2%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0.png" class="" title="Shell输出"></li><li><p>查询所有元素：${数组名[*]}  或  ${数组名[@]}</p><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0.png" class="" title="Shell输出"></li></ul><ul><li>查询元素个数：在查询所有元素基础上，数组名前面加上#<img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0.png" class="" title="Shell输出"></li></ul><h4 id="5-10-3、数组修改"><a href="#5-10-3、数组修改" class="headerlink" title="5.10.3、数组修改"></a>5.10.3、数组修改</h4><p>变量名[索引]=新值</p><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9.png" class="" title="Shell输出"><h4 id="5-10-4、数组删除"><a href="#5-10-4、数组删除" class="headerlink" title="5.10.4、数组删除"></a>5.10.4、数组删除</h4><p>unset 数组名</p><img src="/2020/06/01/Shell%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png" class="" title="Shell输出"><h4 id="5-10-5、数组应用"><a href="#5-10-5、数组应用" class="headerlink" title="5.10.5、数组应用"></a>5.10.5、数组应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#遍历数组</span><br><span class="line">myArr&#x3D;(hello python c c++ java)</span><br><span class="line">for ele in $&#123;myArr[*]&#125;</span><br><span class="line">do</span><br><span class="line">echo $&#123;ele&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Shell概述&quot;&gt;&lt;a href=&quot;#一、Shell概述&quot; class=&quot;headerlink&quot; title=&quot;一、Shell概述&quot;&gt;&lt;/a&gt;一、Shell概述&lt;/h1&gt;&lt;p&gt;弱类型语言&lt;/p&gt;
&lt;h2 id=&quot;1、Shell是什么&quot;&gt;&lt;a href=&quot;#1、
      
    
    </summary>
    
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo框架+ayer主题搭建博客</title>
    <link href="http://yoursite.com/2020/06/01/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6-ayer%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/06/01/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6-ayer%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-05-31T16:58:51.000Z</published>
    <updated>2020-05-31T17:03:26.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Loading……"><a href="#Loading……" class="headerlink" title="Loading……"></a>Loading……</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Loading……&quot;&gt;&lt;a href=&quot;#Loading……&quot; class=&quot;headerlink&quot; title=&quot;Loading……&quot;&gt;&lt;/a&gt;Loading……&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="gitalk" scheme="http://yoursite.com/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2020/05/31/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/31/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-31T07:36:17.000Z</published>
    <updated>2020-05-31T13:02:58.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Linux + CentOS6.5</p><hr><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ol><li><p>新建文件夹：mkdir 文件夹名</p></li><li><p>新建文件： touch 新建文本.txt</p></li><li><p>复制：cp 新建文本.txt 目标目录</p></li><li><p>剪切/移动：mv 新建文本.txt 目标目录</p></li><li><p>重命名：mv 新建文本.txt 重命名.txt</p></li><li><p>列出当前文件夹中所有文件</p><ul><li>ls : 只列出文件名或目录名</li><li>ls -l(ll) ：列出文件和目录详细信息</li></ul></li><li><p>查看当前所在路径：pwd</p></li><li><p>切换目录 cd </p><ul><li>cd .当前文件夹</li><li>cd ..上级文件夹</li><li>cd ~返回用户文件夹</li><li>cd /进入根目录</li></ul></li><li><p>删除：rm</p><ul><li>rm 删除文件（无提示）（可恢复）</li><li>rm -f 强制删除文件（无提示）</li><li>rm -i 交互式删除文件（有提示）</li><li>rm -r 递归删除文件和目录（慎用）</li><li>rm -rf* 删除当前目录下所有（慎用）</li></ul></li><li><p>删除一个空目录：rmdir 空目录名</p></li></ol><hr><h1 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h1><h2 id="gedit"><a href="#gedit" class="headerlink" title="gedit"></a>gedit</h2><p>gedit 文件名.txt 使用记事本打开文件</p><h2 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h2><p>i 输入<br>esc+:q退出<br>esc+:wq保存并退出<br>esc+:q!不保存强制退出</p><hr><h1 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h1><ol><li>cat 文件名：一次性读取全部文件内容（读取内容比较少的文件）</li><li>more 文件名：逐步读取文件内容、分页（读取内容比较多的文件）</li><li>tail （读取动态变化的文件）<ul><li><strong>tail -f 文件名：实时刷新<u>日志</u>，读取最新内容</strong></li><li>tail -c 字节数 文件名：输出最后n个字节</li><li>tail -n 行数 文件名：显示文件最后x行内容</li></ul></li></ol><hr><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>查找文件中符合条件的字符串</p><ul><li>grep -i 字符 文件名.txt：忽略字符大小写的差别，查出包含匹配文本的所有行</li><li>grep -v 字符 文件名.txt：反向匹配，查出不包含匹配文本的所有行</li></ul><hr><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><h2 id="文件权限-rwxrwxrwx"><a href="#文件权限-rwxrwxrwx" class="headerlink" title="文件权限 -rwxrwxrwx"></a>文件权限 -rwxrwxrwx</h2><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是770：<br>owner = rwx = 4+2+1 = 7<br>group = rwx = 4+2+1 = 7<br>others= — = 0+0+0 = 0</p><h2 id="权限变更命令"><a href="#权限变更命令" class="headerlink" title="权限变更命令"></a>权限变更命令</h2><ol><li><p>方法一：<code>chmod -R xyz 文件或目录</code><br>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加<br> -R : 进行递归的持续变更，即连同次目录下的所有文件都会变更<br>举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令<code>chmod 777 .bashrc</code></p></li><li><p>方法二<br>将文件权限设置为 -rwxr-xr– ，可以使用 <code>chmod u=rwx,g=rx,o=r 文件名</code></p></li></ol><hr><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><ul><li>‘&gt;’：输出重定向命令<br>  <code>cat old.txt &gt; new.txt</code> 将old.txt内容复制给new.txt</li><li>‘&gt;&gt;’：输出重定向追加到文件的底部<br>  <code>cat old.txt &gt;&gt; new.txt</code> 将old.txt内容追加到new.txt中，若没有目标文件则新建文件</li></ul><hr><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>把左边命令返回的结果交给右边命令处理<br><code>ps -ef | grep python</code> 搜素含有python字符串的进程</p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li><p>ps：列出当前终端下的相关进程</p><ul><li>ps -ef：显示所有命令</li></ul></li><li><p>杀死进程</p><ul><li>kill PID：杀死进程</li><li>kill -9 PID：彻底杀死进程，当使用kill无法将进程杀死才使用</li></ul></li><li><p>ifconfig：查看网络情况</p></li><li><p>取别名</p><ul><li>alias 别名=命令（如alias is=ifconfig，is可以作为ifconfig使用）</li><li>unalias 别名：取消别名</li></ul></li><li><p>ping：测试网络连通</p></li><li><p>clear：清屏</p></li><li><p>hostname：查看主机名称</p></li><li><p>历史命令</p><ul><li>history：打印历史命令</li><li>history -c：清除历史命令</li></ul></li><li><p>service network restart：重启网卡</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;Linux + CentOS6.5&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/2020/05/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/05/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-05-28T16:09:47.000Z</published>
    <updated>2020-06-07T14:29:30.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="测试项" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E9%A1%B9/"/>
    
    
      <category term="测试项" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/28/hello-world/"/>
    <id>http://yoursite.com/2020/05/28/hello-world/</id>
    <published>2020-05-28T15:47:59.351Z</published>
    <updated>2020-05-28T15:47:59.351Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
