<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux常用命令全集</title>
    <url>/archives/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%A8%E9%9B%86.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Linux + CentOS6.5</p>
<hr>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ol>
<li><p>新建文件夹：mkdir 文件夹名</p>
</li>
<li><p>新建文件： touch 新建文本.txt</p>
</li>
<li><p>复制：cp 新建文本.txt 目标目录</p>
</li>
<li><p>剪切/移动：mv 新建文本.txt 目标目录</p>
</li>
<li><p>重命名：mv 新建文本.txt 重命名.txt</p>
</li>
<li><p>列出当前文件夹中所有文件</p>
<ul>
<li>ls : 只列出文件名或目录名</li>
<li>ls -l(ll) ：列出文件和目录详细信息</li>
</ul>
</li>
<li><p>查看当前所在路径：pwd</p>
</li>
<li><p>切换目录 cd </p>
<ul>
<li>cd .当前文件夹</li>
<li>cd ..上级文件夹</li>
<li>cd ~返回用户文件夹</li>
<li>cd /进入根目录</li>
</ul>
</li>
<li><p>删除：rm</p>
<ul>
<li>rm 删除文件（无提示）（可恢复）</li>
<li>rm -f 强制删除文件（无提示）</li>
<li>rm -i 交互式删除文件（有提示）</li>
<li>rm -r 递归删除文件和目录（慎用）</li>
<li>rm -rf* 删除当前目录下所有（慎用）</li>
</ul>
</li>
<li><p>删除一个空目录：rmdir 空目录名</p>
</li>
</ol>
<hr>
<h1 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h1><h2 id="gedit"><a href="#gedit" class="headerlink" title="gedit"></a>gedit</h2><p>gedit 文件名.txt 使用记事本打开文件</p>
<h2 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h2><p>i 输入<br>esc+:q退出<br>esc+:wq保存并退出<br>esc+:q!不保存强制退出</p>
<hr>
<h1 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h1><ol>
<li>cat 文件名：一次性读取全部文件内容（读取内容比较少的文件）</li>
<li>more 文件名：逐步读取文件内容、分页（读取内容比较多的文件）</li>
<li>tail （读取动态变化的文件）<ul>
<li><strong>tail -f 文件名：实时刷新<u>日志</u>，读取最新内容</strong></li>
<li>tail -c 字节数 文件名：输出最后n个字节</li>
<li>tail -n 行数 文件名：显示文件最后x行内容</li>
</ul>
</li>
</ol>
<hr>
<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>查找文件中符合条件的字符串</p>
<ul>
<li>grep -i 字符 文件名.txt：忽略字符大小写的差别，查出包含匹配文本的所有行</li>
<li>grep -v 字符 文件名.txt：反向匹配，查出不包含匹配文本的所有行</li>
</ul>
<hr>
<h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><h2 id="文件权限-rwxrwxrwx"><a href="#文件权限-rwxrwxrwx" class="headerlink" title="文件权限 -rwxrwxrwx"></a>文件权限 -rwxrwxrwx</h2><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是770：<br>owner = rwx = 4+2+1 = 7<br>group = rwx = 4+2+1 = 7<br>others= — = 0+0+0 = 0</p>
<h2 id="权限变更命令"><a href="#权限变更命令" class="headerlink" title="权限变更命令"></a>权限变更命令</h2><ol>
<li><p>方法一：<code>chmod -R xyz 文件或目录</code><br>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加<br> -R : 进行递归的持续变更，即连同次目录下的所有文件都会变更<br>举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令<code>chmod 777 .bashrc</code></p>
</li>
<li><p>方法二<br>将文件权限设置为 -rwxr-xr– ，可以使用 <code>chmod u=rwx,g=rx,o=r 文件名</code></p>
</li>
</ol>
<hr>
<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><ul>
<li>‘&gt;’：输出重定向命令<br>  <code>cat old.txt &gt; new.txt</code> 将old.txt内容复制给new.txt</li>
<li>‘&gt;&gt;’：输出重定向追加到文件的底部<br>  <code>cat old.txt &gt;&gt; new.txt</code> 将old.txt内容追加到new.txt中，若没有目标文件则新建文件</li>
</ul>
<hr>
<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>把左边命令返回的结果交给右边命令处理<br><code>ps -ef | grep python</code> 搜素含有python字符串的进程</p>
<hr>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li><p>ps：列出当前终端下的相关进程</p>
<ul>
<li>ps -ef：显示所有命令</li>
</ul>
</li>
<li><p>杀死进程</p>
<ul>
<li>kill PID：杀死进程</li>
<li>kill -9 PID：彻底杀死进程，当使用kill无法将进程杀死才使用</li>
</ul>
</li>
<li><p>ifconfig：查看网络情况</p>
</li>
<li><p>取别名</p>
<ul>
<li>alias 别名=命令（如alias is=ifconfig，is可以作为ifconfig使用）</li>
<li>unalias 别名：取消别名</li>
</ul>
</li>
<li><p>ping：测试网络连通</p>
</li>
<li><p>clear：清屏</p>
</li>
<li><p>hostname：查看主机名称</p>
</li>
<li><p>历史命令</p>
<ul>
<li>history：打印历史命令</li>
<li>history -c：清除历史命令</li>
</ul>
</li>
<li><p>service network restart：重启网卡</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo5分钟免费搭建个人博客教程</title>
    <url>/archives/hexo5%E5%88%86%E9%92%9F%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>（第一次搭建个人博客，记录一下搭建方法还有那些踩过的坑）</p>
<h4 id="环境：windows10"><a href="#环境：windows10" class="headerlink" title="环境：windows10"></a>环境：windows10</h4><h4 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h4><h5 id="1-安装好node-js-和-Git"><a href="#1-安装好node-js-和-Git" class="headerlink" title="1.安装好node.js 和 Git"></a>1.安装好node.js 和 Git</h5><h5 id="2-安装淘宝的cnpm"><a href="#2-安装淘宝的cnpm" class="headerlink" title="2.安装淘宝的cnpm"></a>2.安装淘宝的cnpm</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm -v  &#x2F;&#x2F;查看安装版本</span><br></pre></td></tr></table></figure>
<h2 id="一、使用hexo框架搭建静态博客"><a href="#一、使用hexo框架搭建静态博客" class="headerlink" title="一、使用hexo框架搭建静态博客"></a>一、使用hexo框架搭建静态博客</h2><h3 id="1-安装-hexo-框架"><a href="#1-安装-hexo-框架" class="headerlink" title="1.安装 hexo 框架"></a>1.安装 hexo 框架</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v   &#x2F;&#x2F;查看hexo版本</span><br></pre></td></tr></table></figure>
<h3 id="2-在磁盘中新建-blog-文件夹"><a href="#2-在磁盘中新建-blog-文件夹" class="headerlink" title="2.在磁盘中新建 blog 文件夹"></a>2.在磁盘中新建 blog 文件夹</h3><p>在 blog 文件夹中打开 Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init  &#x2F;&#x2F;新建一个网站</span><br></pre></td></tr></table></figure>
<h3 id="3-启动服务器"><a href="#3-启动服务器" class="headerlink" title="3.启动服务器"></a>3.启动服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>打开浏览器中，输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问博客<br>ctrl+c 关闭服务器</p>
<h3 id="4-新建一篇博客"><a href="#4-新建一篇博客" class="headerlink" title="4.新建一篇博客"></a>4.新建一篇博客</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;第一篇博客&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>文件路径：D:\blog\source_posts\第一篇博客.md</li>
<li>在vscode中打开.md文件、编辑</li>
</ul>
<h3 id="5-清除缓存文件"><a href="#5-清除缓存文件" class="headerlink" title="5.清除缓存文件"></a>5.清除缓存文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>建议每次生成站点或部署之前都用该命令清理一下缓存</p>
<h3 id="6-生成静态文件"><a href="#6-生成静态文件" class="headerlink" title="6.生成静态文件"></a>6.生成静态文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<h3 id="7-再次启动服务器"><a href="#7-再次启动服务器" class="headerlink" title="7.再次启动服务器"></a>7.再次启动服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在刚才打开的浏览器博客页面刷新，出现新写的文章</p>
<h3 id="8-把博客部署到Github"><a href="#8-把博客部署到Github" class="headerlink" title="8.把博客部署到Github"></a>8.把博客部署到Github</h3><ul>
<li>打开你的Github——&gt;新建仓库，仓库名必须是:你的github名字.github.io.git</li>
<li>回到命令行，ctrl+c断开hexo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li>设置 _config.yml 文件:最下方 #Deployment 的 deploy 修改：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@github.com:basssss&#x2F;basssss.github.io.git（仓库地址）</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li>
<li>部署到 Github<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="9-进入博客页面"><a href="#9-进入博客页面" class="headerlink" title="9.进入博客页面"></a>9.进入博客页面</h3><h2 id="浏览器中输入地址：basssss-github-io跳转到博客页面"><a href="#浏览器中输入地址：basssss-github-io跳转到博客页面" class="headerlink" title="浏览器中输入地址：basssss.github.io跳转到博客页面"></a>浏览器中输入地址：basssss.github.io跳转到博客页面</h2><p>至此hexo框架搭建静态博客完毕<br>参考资料</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">CodeSheep</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo文档</a></li>
</ul>
<hr>
<h2 id="二、安装ayer主题"><a href="#二、安装ayer主题" class="headerlink" title="二、安装ayer主题"></a>二、安装ayer主题</h2><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Shen-Yu&#x2F;hexo-theme-ayer.git themes&#x2F;ayer</span><br></pre></td></tr></table></figure>
<h3 id="2-设置-config-yml文件"><a href="#2-设置-config-yml文件" class="headerlink" title="2.设置_config.yml文件"></a>2.设置_config.yml文件</h3><p>打开_config.yml文件，找到theme修改为ayer保存退出。</p>
<h3 id="3-新增menu"><a href="#3-新增menu" class="headerlink" title="3.新增menu"></a>3.新增menu</h3><p>仿照分类和标签的方式，新增menu如”关于我”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page AboutMe</span><br></pre></td></tr></table></figure>
<hr>
<p>至此ayer主题安装完毕<br>参考资料（作者文档中的安装步骤写的很详细，看文档就好）</p>
<ul>
<li><a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">ayer文档</a></li>
</ul>
<hr>
<h2 id="三、安装Gitalk评论插件"><a href="#三、安装Gitalk评论插件" class="headerlink" title="三、安装Gitalk评论插件"></a>三、安装Gitalk评论插件</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><ul>
<li><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">Gitalk安装步骤</a></li>
<li>直接在ayer的_config.yml文件中修改就行，不需要再添加div代码块</li>
<li>部署好后要登录github初始化才能评论</li>
</ul>
<h3 id="2-在自己新建的menu页面中安装Gitalk评论插件"><a href="#2-在自己新建的menu页面中安装Gitalk评论插件" class="headerlink" title="2.在自己新建的menu页面中安装Gitalk评论插件"></a>2.在自己新建的menu页面中安装Gitalk评论插件</h3><p>ayer主题默认在主页和文章底部添加Gitalk，在自己新增的页面如友情链接link页面中安装Gitalk需要修改代码</p>
<ul>
<li>在D:\blog\source\links\index.md<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>在D:\blog\themes\ayer\layout_partial\article.ejs文件中添加一个容器，用下面的 Javascript 代码来生成 gitalk 插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">var gitalk &#x3D; new Gitalk(&#123;</span><br><span class="line">  clientID: &#39;GitHub Application Client ID&#39;,</span><br><span class="line">  clientSecret: &#39;GitHub Application Client Secret&#39;,</span><br><span class="line">  repo: &#39;GitHub repo&#39;,</span><br><span class="line">  owner: &#39;GitHub repo owner&#39;,</span><br><span class="line">  admin: [&#39;GitHub repo owner and collaborators, only these guys can initialize github issues&#39;],</span><br><span class="line">  id: location.pathname,      &#x2F;&#x2F; Ensure uniqueness and length less than 50</span><br><span class="line">  distractionFreeMode: false  &#x2F;&#x2F; Facebook-like distraction free mode</span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(&#39;gitalk-container&#39;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>至此Gitalk评论插件安装完毕<br>参考资料：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">Gitalk</a></p>
<hr>
<h2 id="四、添加友情链接页面"><a href="#四、添加友情链接页面" class="headerlink" title="四、添加友情链接页面"></a>四、添加友情链接页面</h2><p>原主题是没有友链页面的，需要自己写代码，这是我的<br>在D:\blog\source\links下新建文件夹LinkImage存放图片，新建文件link.css</p>
<ul>
<li>index.md<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;allLinks&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;图片地址&quot; alt&#x3D;&quot;图片描述&quot;&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;友情链接地址&quot;&gt;博客名&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li>
<li>link.css<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.allLinks &#123;</span><br><span class="line">    display: -webkit-flex; &#x2F;* Safari *&#x2F;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.allLinks li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    display: inline-flex;</span><br><span class="line">    border-radius: 1rem;</span><br><span class="line">    width: 20rem;</span><br><span class="line">    height: 8rem;</span><br><span class="line">    margin-top: 3rem;</span><br><span class="line">    margin-right:2rem;</span><br><span class="line">    overflow: hidden; &#x2F;*超出边界部分隐藏*&#x2F;</span><br><span class="line">    background-color: #403e3e;</span><br><span class="line">&#125;</span><br><span class="line">.allLinks li img &#123;</span><br><span class="line">    width:6rem;</span><br><span class="line">    height:6rem;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    margin: 1rem;</span><br><span class="line">&#125;</span><br><span class="line">.allLinks li a &#123;</span><br><span class="line">    width: 12rem;</span><br><span class="line">    padding-top: 10%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    font-size: 1.7rem;</span><br><span class="line">    font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, Arial, sans-serif;</span><br><span class="line">    color:#bbb;</span><br><span class="line">    word-wrap: break-word; &#x2F;*文字换行*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="五、hexo给文章添加分类和标签"><a href="#五、hexo给文章添加分类和标签" class="headerlink" title="五、hexo给文章添加分类和标签"></a>五、hexo给文章添加分类和标签</h2><h3 id="1-添加分类"><a href="#1-添加分类" class="headerlink" title="1.添加分类"></a>1.添加分类</h3><ul>
<li>在D:\blog\source\categories\index.md中添加 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure></li>
<li>需要添加分类的文章中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">    - 分类名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-添加标签"><a href="#2-添加标签" class="headerlink" title="2.添加标签"></a>2.添加标签</h3><ul>
<li>在D:\blog\source\tags\index.md中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li>需要添加标签的文章中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">    - 标签名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、修改Github-ribbon样式"><a href="#六、修改Github-ribbon样式" class="headerlink" title="六、修改Github ribbon样式"></a>六、修改Github ribbon样式</h2><p>修改D:\blog\themes\ayer\layout_partial\ayer.ejs的代码，将原来的a标签修改为在<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">Github ribbon</a>中选中样式的代码，并修改所有的”github-corner”为”forkMe”</p>


<h2 id="七、hexo框架插入图片"><a href="#七、hexo框架插入图片" class="headerlink" title="七、hexo框架插入图片"></a>七、hexo框架插入图片</h2><p>在写的博客中插入图片时，不能用普通的Markdown语法，参考<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">hexo文档</a>，应该：</p>
<ul>
<li>安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image -- save</span><br></pre></td></tr></table></figure></li>
<li>将 config.yml 文件中的 post_asset_folder 选项设为 true</li>
<li>创建新文章和同名文件夹，将图片资源放到文件夹中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li>
<li>在文档中需要插入图片的地方<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片名.jpg 描述语句 %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="八、修改文章路径"><a href="#八、修改文章路径" class="headerlink" title="八、修改文章路径"></a>八、修改文章路径</h2><p>hexo默认文章路径为年/月/日/文件名，目录层次过长不利于收录，所以在根目录的config.yml文件中，修改默认路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: archives&#x2F;:title.html</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitalk</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo5分钟免费搭建个人博客教程</title>
    <url>/archives/hexoBuildBlog.html</url>
    <content><![CDATA[<p>（第一次搭建个人博客，记录一下搭建方法还有那些踩过的坑）</p>
<h4 id="环境：windows10"><a href="#环境：windows10" class="headerlink" title="环境：windows10"></a>环境：windows10</h4><h4 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h4><h5 id="1-安装好node-js-和-Git"><a href="#1-安装好node-js-和-Git" class="headerlink" title="1.安装好node.js 和 Git"></a>1.安装好node.js 和 Git</h5><h5 id="2-安装淘宝的cnpm"><a href="#2-安装淘宝的cnpm" class="headerlink" title="2.安装淘宝的cnpm"></a>2.安装淘宝的cnpm</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm -v  &#x2F;&#x2F;查看安装版本</span><br></pre></td></tr></table></figure>
<h2 id="一、使用hexo框架搭建静态博客"><a href="#一、使用hexo框架搭建静态博客" class="headerlink" title="一、使用hexo框架搭建静态博客"></a>一、使用hexo框架搭建静态博客</h2><h3 id="1-安装-hexo-框架"><a href="#1-安装-hexo-框架" class="headerlink" title="1.安装 hexo 框架"></a>1.安装 hexo 框架</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v   &#x2F;&#x2F;查看hexo版本</span><br></pre></td></tr></table></figure>
<h3 id="2-在磁盘中新建-blog-文件夹"><a href="#2-在磁盘中新建-blog-文件夹" class="headerlink" title="2.在磁盘中新建 blog 文件夹"></a>2.在磁盘中新建 blog 文件夹</h3><p>在 blog 文件夹中打开 Git Bash，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init  &#x2F;&#x2F;新建一个网站</span><br></pre></td></tr></table></figure>
<h3 id="3-启动服务器"><a href="#3-启动服务器" class="headerlink" title="3.启动服务器"></a>3.启动服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>打开浏览器中，输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问博客<br>ctrl+c 关闭服务器</p>
<h3 id="4-新建一篇博客"><a href="#4-新建一篇博客" class="headerlink" title="4.新建一篇博客"></a>4.新建一篇博客</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;第一篇博客&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>文件路径：D:\blog\source_posts\第一篇博客.md</li>
<li>在vscode中打开.md文件、编辑</li>
</ul>
<h3 id="5-清除缓存文件"><a href="#5-清除缓存文件" class="headerlink" title="5.清除缓存文件"></a>5.清除缓存文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>建议每次生成站点或部署之前都用该命令清理一下缓存</p>
<h3 id="6-生成静态文件"><a href="#6-生成静态文件" class="headerlink" title="6.生成静态文件"></a>6.生成静态文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<h3 id="7-再次启动服务器"><a href="#7-再次启动服务器" class="headerlink" title="7.再次启动服务器"></a>7.再次启动服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在刚才打开的浏览器博客页面刷新，出现新写的文章</p>
<h3 id="8-把博客部署到Github"><a href="#8-把博客部署到Github" class="headerlink" title="8.把博客部署到Github"></a>8.把博客部署到Github</h3><ul>
<li>打开你的Github——&gt;新建仓库，仓库名必须是:你的github名字.github.io.git</li>
<li>回到命令行，ctrl+c断开hexo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li>设置 _config.yml 文件:最下方 #Deployment 的 deploy 修改：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@github.com:basssss&#x2F;basssss.github.io.git（仓库地址）</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li>
<li>部署到 Github<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="9-进入博客页面"><a href="#9-进入博客页面" class="headerlink" title="9.进入博客页面"></a>9.进入博客页面</h3><h2 id="浏览器中输入地址：basssss-github-io跳转到博客页面"><a href="#浏览器中输入地址：basssss-github-io跳转到博客页面" class="headerlink" title="浏览器中输入地址：basssss.github.io跳转到博客页面"></a>浏览器中输入地址：basssss.github.io跳转到博客页面</h2><p>至此hexo框架搭建静态博客完毕<br>参考资料</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">CodeSheep</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo文档</a></li>
</ul>
<hr>
<h2 id="二、安装ayer主题"><a href="#二、安装ayer主题" class="headerlink" title="二、安装ayer主题"></a>二、安装ayer主题</h2><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Shen-Yu&#x2F;hexo-theme-ayer.git themes&#x2F;ayer</span><br></pre></td></tr></table></figure>
<h3 id="2-设置-config-yml文件"><a href="#2-设置-config-yml文件" class="headerlink" title="2.设置_config.yml文件"></a>2.设置_config.yml文件</h3><p>打开_config.yml文件，找到theme修改为ayer保存退出。</p>
<h3 id="3-新增menu"><a href="#3-新增menu" class="headerlink" title="3.新增menu"></a>3.新增menu</h3><p>仿照分类和标签的方式，新增menu如”关于我”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page AboutMe</span><br></pre></td></tr></table></figure>
<hr>
<p>至此ayer主题安装完毕<br>参考资料（作者文档中的安装步骤写的很详细，看文档就好）</p>
<ul>
<li><a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">ayer文档</a></li>
</ul>
<hr>
<h2 id="三、安装Gitalk评论插件"><a href="#三、安装Gitalk评论插件" class="headerlink" title="三、安装Gitalk评论插件"></a>三、安装Gitalk评论插件</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><ul>
<li><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">Gitalk安装步骤</a></li>
<li>直接在ayer的_config.yml文件中修改就行，不需要再添加div代码块</li>
<li>部署好后要登录github初始化才能评论</li>
</ul>
<h3 id="2-在自己新建的menu页面中安装Gitalk评论插件"><a href="#2-在自己新建的menu页面中安装Gitalk评论插件" class="headerlink" title="2.在自己新建的menu页面中安装Gitalk评论插件"></a>2.在自己新建的menu页面中安装Gitalk评论插件</h3><p>ayer主题默认在主页和文章底部添加Gitalk，在自己新增的页面如友情链接link页面中安装Gitalk需要修改代码</p>
<ul>
<li>在D:\blog\source\links\index.md<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>在D:\blog\themes\ayer\layout_partial\article.ejs文件中添加一个容器，用下面的 Javascript 代码来生成 gitalk 插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">var gitalk &#x3D; new Gitalk(&#123;</span><br><span class="line">  clientID: &#39;GitHub Application Client ID&#39;,</span><br><span class="line">  clientSecret: &#39;GitHub Application Client Secret&#39;,</span><br><span class="line">  repo: &#39;GitHub repo&#39;,</span><br><span class="line">  owner: &#39;GitHub repo owner&#39;,</span><br><span class="line">  admin: [&#39;GitHub repo owner and collaborators, only these guys can initialize github issues&#39;],</span><br><span class="line">  id: location.pathname,      &#x2F;&#x2F; Ensure uniqueness and length less than 50</span><br><span class="line">  distractionFreeMode: false  &#x2F;&#x2F; Facebook-like distraction free mode</span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(&#39;gitalk-container&#39;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>至此Gitalk评论插件安装完毕<br>参考资料：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">Gitalk</a></p>
<hr>
<h2 id="四、添加友情链接页面"><a href="#四、添加友情链接页面" class="headerlink" title="四、添加友情链接页面"></a>四、添加友情链接页面</h2><p>原主题是没有友链页面的，需要自己写代码，这是我的<br>在D:\blog\source\links下新建文件夹LinkImage存放图片，新建文件link.css</p>
<ul>
<li>index.md<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;allLinks&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;图片地址&quot; alt&#x3D;&quot;图片描述&quot;&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;友情链接地址&quot;&gt;博客名&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li>
<li>link.css<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.allLinks &#123;</span><br><span class="line">    display: -webkit-flex; &#x2F;* Safari *&#x2F;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.allLinks li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    display: inline-flex;</span><br><span class="line">    border-radius: 1rem;</span><br><span class="line">    width: 20rem;</span><br><span class="line">    height: 8rem;</span><br><span class="line">    margin-top: 3rem;</span><br><span class="line">    margin-right:2rem;</span><br><span class="line">    overflow: hidden; &#x2F;*超出边界部分隐藏*&#x2F;</span><br><span class="line">    background-color: #403e3e;</span><br><span class="line">&#125;</span><br><span class="line">.allLinks li img &#123;</span><br><span class="line">    width:6rem;</span><br><span class="line">    height:6rem;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    margin: 1rem;</span><br><span class="line">&#125;</span><br><span class="line">.allLinks li a &#123;</span><br><span class="line">    width: 12rem;</span><br><span class="line">    padding-top: 10%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    font-size: 1.7rem;</span><br><span class="line">    font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, Arial, sans-serif;</span><br><span class="line">    color:#bbb;</span><br><span class="line">    word-wrap: break-word; &#x2F;*文字换行*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="五、hexo给文章添加分类和标签"><a href="#五、hexo给文章添加分类和标签" class="headerlink" title="五、hexo给文章添加分类和标签"></a>五、hexo给文章添加分类和标签</h2><h3 id="1-添加分类"><a href="#1-添加分类" class="headerlink" title="1.添加分类"></a>1.添加分类</h3><ul>
<li>在D:\blog\source\categories\index.md中添加 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure></li>
<li>需要添加分类的文章中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">    - 分类名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-添加标签"><a href="#2-添加标签" class="headerlink" title="2.添加标签"></a>2.添加标签</h3><ul>
<li>在D:\blog\source\tags\index.md中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li>需要添加标签的文章中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">    - 标签名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、修改Github-ribbon样式"><a href="#六、修改Github-ribbon样式" class="headerlink" title="六、修改Github ribbon样式"></a>六、修改Github ribbon样式</h2><p>修改D:\blog\themes\ayer\layout_partial\ayer.ejs的代码，将原来的a标签修改为在<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">Github ribbon</a>中选中样式的代码，并修改所有的”github-corner”为”forkMe”</p>
<img src="/archives/hexoBuildBlog/%E5%85%ADGithubRibbon.JPG" class="" title="GithubRibbon">

<h2 id="七、hexo框架插入图片"><a href="#七、hexo框架插入图片" class="headerlink" title="七、hexo框架插入图片"></a>七、hexo框架插入图片</h2><p>在写的博客中插入图片时，不能用普通的Markdown语法，参考<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">hexo文档</a>，应该：</p>
<ul>
<li>安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image -- save</span><br></pre></td></tr></table></figure></li>
<li>将 config.yml 文件中的 post_asset_folder 选项设为 true</li>
<li>创建新文章和同名文件夹，将图片资源放到文件夹中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li>
<li>在文档中需要插入图片的地方<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片名.jpg 描述语句 %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitalk</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本基本命令</title>
    <url>/archives/shellBasicCommand.html</url>
    <content><![CDATA[<p>（如有错误请在评论区留言）</p>
<h1 id="一、Shell概述"><a href="#一、Shell概述" class="headerlink" title="一、Shell概述"></a>一、Shell概述</h1><p>弱类型语言</p>
<h2 id="1、Shell是什么"><a href="#1、Shell是什么" class="headerlink" title="1、Shell是什么"></a>1、Shell是什么</h2><ol>
<li>shell字面意思：壳，核：操作系统，shell是保护操作系统的</li>
<li>计算机操作系统只能识别0和1组成的机器码，通过GUI|CLI来间接操作操作系统。GUI（图形化界面）|CLI（命令行）在用户与操作系统之间，相当于桥梁，结构上看，GUI和CLI保护操作系统 </li>
<li>GUI与CLI就是通过shell实现的</li>
</ol>
<h2 id="2、Shell怎么用"><a href="#2、Shell怎么用" class="headerlink" title="2、Shell怎么用"></a>2、Shell怎么用</h2><h3 id="2-1、流程"><a href="#2-1、流程" class="headerlink" title="2.1、流程"></a>2.1、流程</h3><ul>
<li>步骤1、创建一个后缀名是.sh的文本文档</li>
<li>步骤2、在文本文件中录入一个命令（第一行固定格式 #! /bin/bash，指用bin目录下的bash解释）如：echo “xxxx”在命令行模式下直接输出数据</li>
<li>步骤3、执行 .sh 文件（shell脚本，在shell脚本里面放一些DOS命令，执行shell脚本相当于在命令行中执行DOS命令）<ul>
<li>sh（bash）shell文件</li>
<li>绝对路径（/xxx/yyy/abc.sh）或相对路径（./abc.sh）注意：<strong>执行命令前修改权限</strong> chmod 777 abc.sh</li>
<li>source abc.sh（source相当于 ./）</li>
</ul>
</li>
</ul>
<h3 id="2-2、练习"><a href="#2-2、练习" class="headerlink" title="2.2、练习"></a>2.2、练习</h3><ul>
<li>在命令行输出当前所在目录<ul>
<li>创建文本文档test.sh</li>
<li>在文档中输入固定格式+命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure></li>
<li>执行<ul>
<li><code>sh test.sh</code></li>
<li><code>chmod 777 test.sh</code><br><code>/home/xxx/test01_pwd.sh</code> 或 <code>./test.sh</code></li>
<li><code>source test.sh</code> </li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="二、Shell语法"><a href="#二、Shell语法" class="headerlink" title="二、Shell语法"></a>二、Shell语法</h1><h2 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h2><p>注释是程序中非功能性说明文本,增强程度的易读性，易维护性</p>
<h3 id="1-1、单行注释"><a href="#1-1、单行注释" class="headerlink" title="1.1、单行注释"></a>1.1、单行注释</h3><p>格式：#注释文本</p>
<h3 id="1-2、多行注释"><a href="#1-2、多行注释" class="headerlink" title="1.2、多行注释"></a>1.2、多行注释</h3><p>格式：<br>:&lt;&lt;自定义的标记<br>  第一行注释<br>  第二行注释<br>  ……<br>自定义的标记</p>
<h2 id="2、变量"><a href="#2、变量" class="headerlink" title="2、变量"></a>2、变量</h2><p>程序=数据+数据操作<br>变量就是数据的载体，是因为其中的值可以改变。变量为数据设置一个引用，以后再使用这个数据时，可以通过引用获取数据。</p>
<h3 id="2-1、变量创建"><a href="#2-1、变量创建" class="headerlink" title="2.1、变量创建"></a>2.1、变量创建</h3><h4 id="2-1-1、格式"><a href="#2-1-1、格式" class="headerlink" title="2.1.1、格式"></a>2.1.1、格式</h4><p>变量名=变量值</p>
<h4 id="2-1-2、注意事项"><a href="#2-1-2、注意事项" class="headerlink" title="2.1.2、注意事项"></a>2.1.2、注意事项</h4><ul>
<li>变量名不能数字开头</li>
<li>变量名不能有空格这种特殊字符</li>
<li>起名做到见名知意</li>
<li>变量名不要使用关键字</li>
<li>赋值符号 <strong>=</strong>左右两侧不要有空格</li>
<li>变量值可以不使用引号，但是如果有空格，必须使用 “ “ 或 ‘ ‘</li>
<li>“ “ 和 ‘ ‘的区别：变量之间赋值时，如果是” “，那么赋的是变量的值；如果是’ ‘，那么是指赋值调用格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&quot;abc&quot;</span><br><span class="line">name2&#x3D;&quot;$&#123;name&#125;&quot;</span><br><span class="line">name3&#x3D;&#39;$&#123;name&#125;&#39;</span><br><span class="line">echo &quot;$&#123;name2&#125;&quot;  &#x2F;&#x2F;输出abc</span><br><span class="line">echo &quot;$&#123;name3&#125;&quot;  &#x2F;&#x2F;输出$&#123;name&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2、变量查询"><a href="#2-2、变量查询" class="headerlink" title="2.2、变量查询"></a>2.2、变量查询</h3><h4 id="2-2-1、格式"><a href="#2-2-1、格式" class="headerlink" title="2.2.1、格式"></a>2.2.1、格式</h4><p>标准格式：”${变量名}”<br>其他格式：${变量名} 或 $变量名</p>
<h3 id="2-3、变量修改"><a href="#2-3、变量修改" class="headerlink" title="2.3、变量修改"></a>2.3、变量修改</h3><h4 id="2-3-3、格式"><a href="#2-3-3、格式" class="headerlink" title="2.3.3、格式"></a>2.3.3、格式</h4><p>变量名=变量值</p>
<h3 id="2-4、变量删除"><a href="#2-4、变量删除" class="headerlink" title="2.4、变量删除"></a>2.4、变量删除</h3><h4 id="2-4-1、格式"><a href="#2-4-1、格式" class="headerlink" title="2.4.1、格式"></a>2.4.1、格式</h4><p>unset 变量名</p>
<h3 id="2-5、变量分类"><a href="#2-5、变量分类" class="headerlink" title="2.5、变量分类"></a>2.5、变量分类</h3><h4 id="2-5-1、本地-局部变量"><a href="#2-5-1、本地-局部变量" class="headerlink" title="2.5.1、本地/局部变量"></a>2.5.1、本地/局部变量</h4><p>只有当前shell可以使用的变量</p>
<h4 id="2-5-2、全局-静态变量"><a href="#2-5-2、全局-静态变量" class="headerlink" title="2.5.2、全局/静态变量"></a>2.5.2、全局/静态变量</h4><ul>
<li>是被多个shell共享的变量</li>
<li>如何将本地变量转换成全局变量？<ul>
<li>格式：export 局部变量</li>
<li>思想：将本地变量设置为全局变量，就是将本地变量导出到共享空间</li>
</ul>
</li>
<li>查询全局变量：env</li>
</ul>
<p>注意1：如果是全局变量，建议变量名所有字母都大写<br>注意2：全局变量要慎用</p>
<h4 id="2-5-3、内置变量（特殊变量）"><a href="#2-5-3、内置变量（特殊变量）" class="headerlink" title="2.5.3、内置变量（特殊变量）"></a>2.5.3、内置变量（特殊变量）</h4><ul>
<li><p>编写shell动态获取某个目录下的子级。实现流程：</p>
<ul>
<li>shell调用时，可以传入要操作的目录。格式：sh abc.sh 要操作的目录（如：<code>sh var01_inner.sh /home/test</code>）</li>
<li>shell执行时，可以获取调用时传入的目录。格式：ls $1（代表传入的第一个参数）<br>上述流程其实就是<strong>传参以及参数解析</strong>的过程，这个参数就可以称之为内置变量</li>
</ul>
</li>
<li><p>语法总结：</p>
<ul>
<li>应用场景：程序执行时有些数据是可变的，调用脚本时，传入这些可变数据，脚本中解析获取</li>
<li>调用格式：sh xxx.sh 参数1 参数2 参数3 ……</li>
<li>解析格式：$N 获取第N个参数</li>
<li>优点：动态传值，更灵活</li>
<li>注意：$N获取第N个参数，但是N最大就到9（若脚本中写$10，这里0为字符串，表示获取第1个参数的值+0，而不是获取第10位参数）<ul>
<li>$0获取脚本文件名 var02_inner.sh</li>
<li>$*获取所有参数</li>
<li>$#获取参数个数</li>
</ul>
</li>
</ul>
</li>
<li><p>test.sh：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#ls $1</span><br><span class="line">echo &quot;第一个参数：$1&quot;</span><br><span class="line">echo &quot;第二个参数：$2&quot;</span><br><span class="line">echo &quot;第三个参数：$3&quot;</span><br><span class="line">echo &quot;文件名：$0&quot;</span><br><span class="line">echo &quot;所有参数：$*&quot;</span><br><span class="line">echo &quot;参数个数：$#&quot;</span><br></pre></td></tr></table></figure>
<p>执行：<code>sh test.sh 1 2 3 4</code></p>
<img src="/archives/shellBasicCommand/%E5%8A%A8%E6%80%81%E4%BC%A0%E5%80%BC.png" class="" title="动态传值">

</li>
</ul>
<h4 id="2-5-4、读取键盘录入"><a href="#2-5-4、读取键盘录入" class="headerlink" title="2.5.4、读取键盘录入"></a>2.5.4、读取键盘录入</h4><ul>
<li>编写shell动态获取某个目录下的子级（目录不一定，要让调用者指定）<ul>
<li>格式：read    –p    “提示语句:”    变量名</li>
<li>作用：执行到此时，程序挂起，等待用户录入数据，录入数据后，回车，录入的数据会赋值给变量</li>
<li>优点：<strong>动态获取数据</strong>，更灵活</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1.用户录入目录</span><br><span class="line">read-p &quot;请您输入一个目录：&quot; myDir</span><br><span class="line">#2.获取目录子集</span><br><span class="line">ls &quot;$&#123;myDir&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2-6、变量特殊赋值"><a href="#2-6、变量特殊赋值" class="headerlink" title="2.6、变量特殊赋值"></a>2.6、变量特殊赋值</h3><ul>
<li>将某个命令的结果赋值给一个变量<ul>
<li>格式：变量名=`命令`</li>
</ul>
</li>
</ul>
<h3 id="2-7、练习"><a href="#2-7、练习" class="headerlink" title="2.7、练习"></a>2.7、练习</h3><h4 id="2-7-1、练习1"><a href="#2-7-1、练习1" class="headerlink" title="2.7.1、练习1"></a>2.7.1、练习1</h4><ul>
<li>使用shell脚本，将当前所在的目录赋值给一个变量并打印出来<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 将pwd命令的结果赋值给一个变量</span><br><span class="line">result&#x3D;&#96;pwd&#96;</span><br><span class="line">echo &quot;$&#123;result&#125;&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-7-2、练习2"><a href="#2-7-2、练习2" class="headerlink" title="2.7.2、练习2"></a>2.7.2、练习2</h4><ul>
<li>计算/etc目录下有多少个文件，用shell脚本实现<ul>
<li>新知识点：获取某个目录下子级个数。格式：ls 目录 | wc –l<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#获取shell02目录下子级的个数</span><br><span class="line">count&#x3D;&#96;ls &#x2F;home&#x2F;shell&#x2F;shell02 | wc -l&#96;</span><br><span class="line">echo &quot;shell02目录下子级的个数：$&#123;count&#125;&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="2-7-3、练习3"><a href="#2-7-3、练习3" class="headerlink" title="2.7.3、练习3"></a>2.7.3、练习3</h4><ul>
<li>实现统计任何指定目录下的文件个数，用shell脚本实现<ul>
<li>方案一<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 动态获取某个目录，再获取目录下子级的个数</span><br><span class="line"># 读取脚本调用是传入的参数</span><br><span class="line">count&#x3D;&#96;ls $1 | wc -l&#96;</span><br><span class="line">echo &quot;$1目录下的子级个数：$&#123;count&#125;&quot;</span><br></pre></td></tr></table></figure></li>
<li>方案二<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 读取键盘录入，获取文件夹路径</span><br><span class="line">read -p &quot;请您输入一个目录路径：&quot; myDir</span><br><span class="line">count&#x3D;&#96;ls $&#123;myDir&#125; | wc -l&#96;</span><br><span class="line">echo &quot;$&#123;myDir&#125;下的子级个数是：$&#123;count&#125;&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h2><p>运算符是变量执行运算时使用的一些特殊符号</p>
<h3 id="3-1、运算符分类"><a href="#3-1、运算符分类" class="headerlink" title="3.1、运算符分类"></a>3.1、运算符分类</h3><h4 id="3-1-1、算数运算符"><a href="#3-1-1、算数运算符" class="headerlink" title="3.1.1、算数运算符"></a>3.1.1、算数运算符</h4><ul>
<li>格式：$((数学表达式))</li>
<li>+-*/% 加减乘除取余</li>
<li>注意：一般计算机语言中除法运算只取商</li>
</ul>
<h4 id="3-1-2、比较运算符"><a href="#3-1-2、比较运算符" class="headerlink" title="3.1.2、比较运算符"></a>3.1.2、比较运算符</h4><ul>
<li>格式：[ 表达式 ]</li>
<li>注意：[]中有两个空格，两个空格中添加表达式</li>
<li>返回boolean值（0为true，1为false）</li>
<li>查看结果：$?</li>
<li>-gt(&gt;)、-lt(&lt;)、-ge(&gt;=)、-le(&lt;=)、-eq(==)、-ne(!=)<img src="/archives/shellBasicCommand/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" class="" title="比较运算符">

</li>
</ul>
<h4 id="3-1-3、逻辑运算符"><a href="#3-1-3、逻辑运算符" class="headerlink" title="3.1.3、逻辑运算符"></a>3.1.3、逻辑运算符</h4><ul>
<li>格式：[ 表达式 ]</li>
<li>返回boolean值（0为true，1为false）</li>
<li>-a 与、-o 或、! 非<img src="/archives/shellBasicCommand/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.png" class="" title="逻辑运算符">

</li>
</ul>
<h4 id="3-1-4、字符串比较"><a href="#3-1-4、字符串比较" class="headerlink" title="3.1.4、字符串比较"></a>3.1.4、字符串比较</h4><ul>
<li>格式：[ 表达式 ]</li>
<li>返回boolean值（0为true，1为false）</li>
<li>==判断两个字符串内容是否一样<br>！=判断两个字符串内容是否不一样<br>-z判断单个字符串长度是不是0（判断字符串是不是空）<img src="/archives/shellBasicCommand/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83.png" class="" title="字符串比较">

</li>
</ul>
<h4 id="3-1-5、文件判断"><a href="#3-1-5、文件判断" class="headerlink" title="3.1.5、文件判断"></a>3.1.5、文件判断</h4><ul>
<li>格式：[ 表达式 ]</li>
<li>返回boolean值（0为true，1为false）</li>
<li>-d：判断是不是文件夹<br>-f：判断是不是文件<br>-e：判断是不是存在<br>变体：test –参数 路径 等价于[ -参数 路径 ]<img src="/archives/shellBasicCommand/%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD1.png" class="" title="文件判断">
<img src="/archives/shellBasicCommand/%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD2.png" class="" title="文件判断">
<img src="/archives/shellBasicCommand/%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD3.png" class="" title="文件判断">

</li>
</ul>
<h3 id="3-2、练习"><a href="#3-2、练习" class="headerlink" title="3.2、练习"></a>3.2、练习</h3><h4 id="3-2-1、练习1"><a href="#3-2-1、练习1" class="headerlink" title="3.2.1、练习1"></a>3.2.1、练习1</h4><ul>
<li>判断/home/shell目录是否为空<ul>
<li>思路：先获取目录自己文件个数，再判断是否大于0<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">count&#x3D;&#96;ls &#x2F;home&#x2F;shell | wc -l&#96;</span><br><span class="line">[ $&#123;count&#125; -gt 0 ]</span><br><span class="line">echo &quot;目录不为空吗：$?&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="3-2-2、练习2"><a href="#3-2-2、练习2" class="headerlink" title="3.2.2、练习2"></a>3.2.2、练习2</h4><ul>
<li>通过用户输入任意目录判断是否为空<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入目录：&quot; myDir</span><br><span class="line">count&#x3D;&#96;ls $&#123;myDir&#125; | wc -l&#96;</span><br><span class="line">[ $&#123;count&#125; -gt 0 ]</span><br><span class="line">echo &quot;目录$&#123;myDir&#125;不为空：$?&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4、函数（方法）"><a href="#4、函数（方法）" class="headerlink" title="4、函数（方法）"></a>4、函数（方法）</h2><ul>
<li>程序=数据+数据操作<br>变量是数据的载体，函数是数据操作的载体，是程序中最小的功能（封装）单元。在函数中一般会封装一个具有特定功能的实现</li>
<li>代码结构更规整，易维护、易读<br>实现了功能复用</li>
</ul>
<h3 id="4-1、函数声明"><a href="#4-1、函数声明" class="headerlink" title="4.1、函数声明"></a>4.1、函数声明</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[function(可选)] 函数名()&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2、函数调用"><a href="#4-2、函数调用" class="headerlink" title="4.2、函数调用"></a>4.2、函数调用</h3><p>函数名</p>
<h3 id="4-3、注意事项"><a href="#4-3、注意事项" class="headerlink" title="4.3、注意事项"></a>4.3、注意事项</h3><ul>
<li>函数不调用不执行（所有计算机语言通用）</li>
<li>顺序上必须先声明再调用（弱类型计算机语言的特点）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 声明函数</span><br><span class="line">hello()&#123;</span><br><span class="line">  echo &quot;hello function&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 调用函数</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-4、函数分类"><a href="#4-4、函数分类" class="headerlink" title="4.4、函数分类"></a>4.4、函数分类</h3><h4 id="4-4-1、无参数无返回值"><a href="#4-4-1、无参数无返回值" class="headerlink" title="4.4.1、无参数无返回值"></a>4.4.1、无参数无返回值</h4><h4 id="4-4-2、有参数"><a href="#4-4-2、有参数" class="headerlink" title="4.4.2、有参数"></a>4.4.2、有参数</h4><ul>
<li><p>声明语法：获取参数使用</p>
<ul>
<li>$N：获取第N个参数 ，N必须&lt;=9</li>
<li>$0：获取脚本文件名</li>
<li>$*：获取所有参数</li>
<li>$#：获取参数个数</li>
</ul>
</li>
<li><p>调用语法：参数传递</p>
<ul>
<li>函数名 参数1 参数2 ……<br>function02.sh：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># 有参数的函数</span><br><span class="line">getSun()&#123;</span><br><span class="line">  echo &quot;两个数字的和：$(($1+$2))&quot;</span><br><span class="line">  echo &quot;第一个参数：$1&quot;</span><br><span class="line">  echo &quot;第二个参数：$2&quot;</span><br><span class="line">  echo &quot;第十个参数：$10&quot; &#x2F;&#x2F;输出结果应该是第一个参数+0</span><br><span class="line">  echo &quot;文件名：$0&quot;</span><br><span class="line">  echo &quot;所有参数：$*&quot;</span><br><span class="line">  echo &quot;参数个数：$#&quot;</span><br><span class="line">&#125;</span><br><span class="line">#函数调用</span><br><span class="line">getSum 4 5 6 7 8 9 1 2 3 a b c</span><br></pre></td></tr></table></figure>
<img src="/archives/shellBasicCommand/%E6%89%A7%E8%A1%8C%E6%9C%89%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0.png" class="" title="执行有参数函数">

</li>
</ul>
</li>
</ul>
<h4 id="4-4-3、有返回值"><a href="#4-4-3、有返回值" class="headerlink" title="4.4.3、有返回值"></a>4.4.3、有返回值</h4><ul>
<li>声明语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数名()&#123;</span><br><span class="line">  …</span><br><span class="line">  return xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>调用语法：<ul>
<li>函数名</li>
</ul>
</li>
<li>查看结果：$?</li>
<li>函数的返回值在shell中只有两种<ul>
<li>0：函数调用正常</li>
<li>非0：函数执行有误</li>
</ul>
</li>
<li>注意：在shell中，没有函数内作用域，函数内变量result出了函数还能用，不需要将它以返回值的方式返回</li>
</ul>
<p>function03.sh：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#带返回值的函数</span><br><span class="line">#函数声明</span><br><span class="line">getSum()&#123;</span><br><span class="line">  result&#x3D;$(($1+$2))</span><br><span class="line">  echo &quot;函数中的result：$&#123;result&#125;&quot;</span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line"># 函数调用</span><br><span class="line">getSum 3 4</span><br><span class="line">echo &quot;函数调用的结果是：$?&quot;</span><br><span class="line">ehco &quot;函数外调用result：$&#123;result&#125;&quot;</span><br></pre></td></tr></table></figure>
<img src="/archives/shellBasicCommand/%E6%89%A7%E8%A1%8C%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0.png" class="" title="执行有返回值函数">

<h3 id="4-5、练习"><a href="#4-5、练习" class="headerlink" title="4.5、练习"></a>4.5、练习</h3><h4 id="4-5-1、练习1"><a href="#4-5-1、练习1" class="headerlink" title="4.5.1、练习1"></a>4.5.1、练习1</h4><ul>
<li>读取键盘录入，录入长方形的长和宽，编写求周长和面积的函数，调用并输出周长和面积的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#读取键盘录入长方形的长和宽</span><br><span class="line">read -p &quot;请输入长方形的长：&quot; length</span><br><span class="line">read -p &quot;请输入长方形的宽：&quot; width</span><br><span class="line"># 编写求周长和面积的函数</span><br><span class="line">getAllLength()&#123;</span><br><span class="line">  echo &quot;周长是$(($1+$2)*2))&quot;</span><br><span class="line">&#125;</span><br><span class="line">getArea()&#123;</span><br><span class="line">  echo &quot;面积是：$(($1*$2))&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 调用函数，传入参数</span><br><span class="line">getAllLength &quot;$&#123;length&#125;&quot; &quot;$&#123;width&#125;&quot;</span><br><span class="line">getArea &quot;$&#123;length&#125;&quot; &quot;$&#123;width&#125;&quot;</span><br></pre></td></tr></table></figure>
<img src="/archives/shellBasicCommand/%E5%87%BD%E6%95%B0%E7%BB%83%E4%B9%A0.png" class="" title="函数练习">

</li>
</ul>
<h2 id="5、流程控制"><a href="#5、流程控制" class="headerlink" title="5、流程控制"></a>5、流程控制</h2><p>流程控制就是控制代码的执行顺序，让代码实现分支或循环执行</p>
<h3 id="5-1、流程控制分类"><a href="#5-1、流程控制分类" class="headerlink" title="5.1、流程控制分类"></a>5.1、流程控制分类</h3><ul>
<li>分支：if + case</li>
<li>循环：for + while</li>
</ul>
<h3 id="5-2、流程控制分支实现之if"><a href="#5-2、流程控制分支实现之if" class="headerlink" title="5.2、流程控制分支实现之if"></a>5.2、流程控制分支实现之if</h3><h4 id="5-2-1、格式1（单分支）"><a href="#5-2-1、格式1（单分支）" class="headerlink" title="5.2.1、格式1（单分支）"></a>5.2.1、格式1（单分支）</h4><ul>
<li>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [  boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">  code……</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>练习：录入年龄，判断是否为成年人，如果成年了输出“成年人”<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">if [ $&#123;age&#125; -ge 18 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;成年人&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-2-2、格式2（双分支）"><a href="#5-2-2、格式2（双分支）" class="headerlink" title="5.2.2、格式2（双分支）"></a>5.2.2、格式2（双分支）</h4><ul>
<li>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">	code……</span><br><span class="line">else</span><br><span class="line">	code……</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>练习：录入年龄，判断是否成年人，如果成年人了输出“成年人”，否则输出未成年<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">if [ $&#123;age&#125; -ge 18 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;成年人&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;未成年&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-2-3、格式3（多分支）"><a href="#5-2-3、格式3（多分支）" class="headerlink" title="5.2.3、格式3（多分支）"></a>5.2.3、格式3（多分支）</h4><ul>
<li>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">	code……</span><br><span class="line">elif [ boolean表达式 ]</span><br><span class="line">then</span><br><span class="line">	code……</span><br><span class="line">elif 可以出现多次</span><br><span class="line">else</span><br><span class="line">	code……</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>练习：录入年龄，如果小于18岁，输出未成年，如果大于等于18岁，小于等于30岁，输出青年，如果大于30岁小于50岁，输出中年，否则输出老年<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入年龄：&quot; age</span><br><span class="line">if [ $&#123;age&#125; -lt 18 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;未成年人&quot;</span><br><span class="line">elif [ $&#123;age&#125; -le 30 ]</span><br><span class="line">then </span><br><span class="line">  echo &quot;青年&quot;</span><br><span class="line">else [ $&#123;age&#125; -lt 50 ]</span><br><span class="line">then</span><br><span class="line">  echo &quot;中年&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;老年&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-3、if练习"><a href="#5-3、if练习" class="headerlink" title="5.3、if练习"></a>5.3、if练习</h3><h4 id="5-3-1、练习1"><a href="#5-3-1、练习1" class="headerlink" title="5.3.1、练习1"></a>5.3.1、练习1</h4><ul>
<li>判断用户输入的用户名和密码是否为admin 123456，如果是则提示登录成功，否则提示失败<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入账号：&quot; username</span><br><span class="line">read -p &quot;请输入密码：&quot; password</span><br><span class="line">if [ $&#123;username&#125;&#x3D;&#x3D;&quot;admin&quot; -a $&#123;password&#125;&#x3D;&#x3D;&quot;123456&quot; ]</span><br><span class="line">then  </span><br><span class="line">  echo &quot;登录成功&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;登录失败&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-3-2、练习2"><a href="#5-3-2、练习2" class="headerlink" title="5.3.2、练习2"></a>5.3.2、练习2</h4><ul>
<li>输入数字，判断是否大于0，如果大于0则将该数字-1并输出，否则+1输出<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入一个数字：&quot; num</span><br><span class="line">if [ $&#123;num&#125; -gt 0 ]</span><br><span class="line">then</span><br><span class="line">  num&#x3D;$(($&#123;num&#125;-1))</span><br><span class="line">  echo &quot;大于0减1后：$&#123;num&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  num&#x3D;$(($&#123;num&#125;+1))</span><br><span class="line">  echo &quot;小于0加1后：$&#123;num&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-3-3、练习3"><a href="#5-3-3、练习3" class="headerlink" title="5.3.3、练习3"></a>5.3.3、练习3</h4><ul>
<li>判断用户输入的目录是否存在，如果存在则统计目录下的文件个数，否则提示用户该目录不存在<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1、读取键盘录入的目录</span><br><span class="line">read -p &quot;请您输入一个目录：&quot; myDir </span><br><span class="line">#2、文件判断，如果是目录，统计目录下的文件个数(ls 目录 | wc -l)，否则给出提示</span><br><span class="line">if [ -d $&#123;myDir&#125; ]</span><br><span class="line">then</span><br><span class="line">	#统计文件个数</span><br><span class="line">	count&#x3D;&#96;ls $&#123;myDir&#125; | wc -l&#96;</span><br><span class="line">	echo &quot;$&#123;myDir&#125; 目录下的文件个数是：$&#123;count&#125;&quot;</span><br><span class="line">else</span><br><span class="line">	echo &quot;您录入的目录不存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-3-4、练习4"><a href="#5-3-4、练习4" class="headerlink" title="5.3.4、练习4"></a>5.3.4、练习4</h4><ul>
<li>判断学生的成绩，大于90-100提示优秀80-90之间提示良好，70-80之间则提示一般，60-70之间提示及格，其他则提示不及格<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请您输入学生成绩：&quot; score</span><br><span class="line">if [ $&#123;score&#125; -le 100 -a $&#123;score&#125; -ge 90 ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;优秀&quot;</span><br><span class="line">elif [ $&#123;score&#125; -ge 80 ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;良好&quot;</span><br><span class="line">elif [ $&#123;score&#125; -ge 70 ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;一般&quot;</span><br><span class="line">elif [ $&#123;score&#125; -ge 60 ]</span><br><span class="line">then </span><br><span class="line">	echo &quot;及格&quot;</span><br><span class="line">else</span><br><span class="line">	echo &quot;不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-3-5、练习5"><a href="#5-3-5、练习5" class="headerlink" title="5.3.5、练习5"></a>5.3.5、练习5</h4><ul>
<li>判断用户输入的内容是否为空，为空则提示，不为空则判断是否为目录，不为目录判断是否为文件，否则提示错误信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请您录入一个文件或目录路径：&quot; myFile</span><br><span class="line">if [ -z $&#123;myFile&#125; ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;录入数据不能为空&quot;</span><br><span class="line">elif [ -d $&#123;myFile&#125; ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;录入的路径是文件夹&quot;</span><br><span class="line">elif [ -f $&#123;myFile&#125; ]</span><br><span class="line">then </span><br><span class="line">	echo &quot;录入的路径是文件&quot;</span><br><span class="line">else</span><br><span class="line">	echo &quot;数据有误&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-3、流程控制分支实现之case"><a href="#5-3、流程控制分支实现之case" class="headerlink" title="5.3、流程控制分支实现之case"></a>5.3、流程控制分支实现之case</h3><h4 id="5-3-1、格式"><a href="#5-3-1、格式" class="headerlink" title="5.3.1、格式"></a>5.3.1、格式</h4><ul>
<li><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 变量(用户输入的数据) in</span><br><span class="line">1)</span><br><span class="line">	code;;</span><br><span class="line">2)</span><br><span class="line">	code;;</span><br><span class="line">3)</span><br><span class="line">	code;;</span><br><span class="line">*)</span><br><span class="line">	code;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
</li>
<li><p>case也可以执行区间判断，但是区间范围局限于0-9<br>区间格式：[开始数字-结束数字]</p>
</li>
<li><p>练习：模拟游戏级别选择，读取键盘录入的数字，如果是数字1，那么输出简单；如果是数字2，那么输出一般；如果是数字3，那么输出困难，其他输出数据有误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">read -p &quot;请输入一个数字：&quot; num</span><br><span class="line">case $&#123;num&#125; in</span><br><span class="line">1)</span><br><span class="line">  echo &quot;简单&quot;;;</span><br><span class="line">2)</span><br><span class="line">  echo &quot;一般&quot;;;</span><br><span class="line">3)</span><br><span class="line">  echo &quot;困难&quot;;;</span><br><span class="line">*)</span><br><span class="line">  echo &quot;数据有误&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-3-2、注意事项"><a href="#5-3-2、注意事项" class="headerlink" title="5.3.2、注意事项"></a>5.3.2、注意事项</h4><ul>
<li>case能实现的 if elif 也能实现</li>
<li>if elif 能实现的，case不一定能实现了</li>
<li>语法上 if elif 更简单</li>
<li>执行效率高</li>
</ul>
<h3 id="5-4、case-练习"><a href="#5-4、case-练习" class="headerlink" title="5.4、case 练习"></a>5.4、case 练习</h3><h4 id="5-4-1、练习1"><a href="#5-4-1、练习1" class="headerlink" title="5.4.1、练习1"></a>5.4.1、练习1</h4><ul>
<li>输入一个序号，判断该用户选择哪款产品，A：笔记本，B：电饭煲，C：小台灯<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1、读取键盘录入</span><br><span class="line">read -p &quot;请您录入一个编号：&quot; num</span><br><span class="line">#2、使用case执行分支操作</span><br><span class="line">case $&#123;num&#125; in</span><br><span class="line">A)</span><br><span class="line">	echo &quot;笔记本&quot;;;</span><br><span class="line">B)</span><br><span class="line">	echo &quot;电饭煲&quot;;;</span><br><span class="line">C)</span><br><span class="line">	echo &quot;小台灯&quot;;;</span><br><span class="line">*)</span><br><span class="line">	echo &quot;数据有误&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-4-2、练习2"><a href="#5-4-2、练习2" class="headerlink" title="5.4.2、练习2"></a>5.4.2、练习2</h4><ul>
<li>请输入对客服的满意度，【0-3】不满意，【4-6】满意，【7-9】非常满意<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#1、读取键盘录入</span><br><span class="line">read -p &quot;请您录入一个数字：&quot; score</span><br><span class="line">#2、使用case执行区间判断</span><br><span class="line">case $&#123;score&#125; in</span><br><span class="line">[0-3])</span><br><span class="line">	echo &quot;不满意&quot;;;</span><br><span class="line">[4-6])</span><br><span class="line">	echo &quot;满意&quot;;;</span><br><span class="line">[7-10])</span><br><span class="line">	echo &quot;非常满意&quot;;;</span><br><span class="line">*)</span><br><span class="line">	echo &quot;数据有误&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-5、流程控制循环实现之for"><a href="#5-5、流程控制循环实现之for" class="headerlink" title="5.5、流程控制循环实现之for"></a>5.5、流程控制循环实现之for</h3><h4 id="5-5-1、格式"><a href="#5-5-1、格式" class="headerlink" title="5.5.1、格式"></a>5.5.1、格式</h4><ul>
<li><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for 变量名 in 列表(v1 v2 v3……)</span><br><span class="line">do</span><br><span class="line">	code……#循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
</li>
<li><p>seq命令优化for循环</p>
<ul>
<li>格式1：seq 参数NUM：默认遍历[1-NUM]之间的所有整数</li>
<li>格式2：seq 参数NUM1 参数NUM2：遍历[NUM1-NUM2]之间的所有整数</li>
<li>格式3：seq 参数NUM1 参数NUM2 参数NUM3：遍历[NUM1-NUM3]之间的整数，但是每次递增NUM2值。不指定NUM2则每次默认递增1，NUM2又称之为步进值</li>
</ul>
</li>
</ul>
<h3 id="5-6、for循环练习"><a href="#5-6、for循环练习" class="headerlink" title="5.6、for循环练习"></a>5.6、for循环练习</h3><p>求1-100之间的和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#思想：定义一个变量（初始化值是0）接收和</span><br><span class="line">#1、定义一个变量，初始化值是0</span><br><span class="line">sum&#x3D;0</span><br><span class="line">#2、遍历1-100</span><br><span class="line">for ele in &#96;seq 100&#96;</span><br><span class="line">do</span><br><span class="line">	sum&#x3D;$(($&#123;sum&#125; + $&#123;ele&#125;))</span><br><span class="line">done</span><br><span class="line">#3、输出变量的值</span><br><span class="line">	echo &quot;1-100之间的和是：$&#123;sum&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="5-6、流程控制循环实现之while"><a href="#5-6、流程控制循环实现之while" class="headerlink" title="5.6、流程控制循环实现之while"></a>5.6、流程控制循环实现之while</h3><h4 id="5-6-1、格式"><a href="#5-6-1、格式" class="headerlink" title="5.6.1、格式"></a>5.6.1、格式</h4><ul>
<li>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while [ boolean表达式 ]</span><br><span class="line">do</span><br><span class="line">	code……</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-7、while循环练习"><a href="#5-7、while循环练习" class="headerlink" title="5.7、while循环练习"></a>5.7、while循环练习</h3><p>求1-100之间的和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">sum&#x3D;0</span><br><span class="line">num&#x3D;1</span><br><span class="line">while [ $&#123;num&#125; -le 100 ]</span><br><span class="line">do</span><br><span class="line">  sum&#x3D;$(($&#123;sum&#125;+$&#123;num&#125;))</span><br><span class="line">  num&#x3D;$(($&#123;num&#125;+1))</span><br><span class="line">done</span><br><span class="line">  echo &quot;1-100之间的和是：$&#123;sum&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="5-8、综合练习"><a href="#5-8、综合练习" class="headerlink" title="5.8、综合练习"></a>5.8、综合练习</h3><p>输入一个目录，判断目录是否存在，如果不存在则给出提示，如果存在则提示输入要创建的文件名（前提：要先进入目录）判断创建的文件是否存在，如果不存在，则继续创建，否则提示给文件已经存在。要求：目录操作与文件操作，分别两个函数实现，两个函数中分别实现业务逻辑（分支语句）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#4 创建处理文件的函数</span><br><span class="line">doMyFile()&#123;</span><br><span class="line">	echo &quot;文件处理函数被调用了......&quot;</span><br><span class="line">	#开始处理</span><br><span class="line">	#文件存在，给出提示，不存在，就创建</span><br><span class="line">	if [ -f $1 ]</span><br><span class="line">	then </span><br><span class="line">		echo &quot;文件已经存在了！&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;文件开始创建&quot;</span><br><span class="line">		echo &quot;......&quot;</span><br><span class="line">		touch $1</span><br><span class="line">		echo &quot;文件创建&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line">#3 处理目录的函数</span><br><span class="line">doMyDir()&#123;</span><br><span class="line">	#获取传入的目录 $1</span><br><span class="line">	#如果不是目录，给出提示，是目录操作文件</span><br><span class="line">	if [ -d $1 ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;操作文件......&quot;</span><br><span class="line">		#1、让用户录入文件名</span><br><span class="line">		read -p &quot;请您录入一个文件名：&quot; myFile</span><br><span class="line">		#2、进入目录</span><br><span class="line">		cd $1</span><br><span class="line">		#3、操作文件</span><br><span class="line">		doMyFile $&#123;myFile&#125;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;您录入的不是目录&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line">#1 用户录入目录</span><br><span class="line">read -p &quot;请您输入一个目录 &quot; myDir</span><br><span class="line">#2 操作目录(单独一个函数实现)</span><br><span class="line">doMyDir  $&#123;myDir&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-9、重定向"><a href="#5-9、重定向" class="headerlink" title="5.9、重定向"></a>5.9、重定向</h3><p>将命令产生的数据保存到磁盘文件。一种序列化（持久化）机制。</p>
<h4 id="5-9-1、格式1"><a href="#5-9-1、格式1" class="headerlink" title="5.9.1、格式1"></a>5.9.1、格式1</h4><ul>
<li>命令：1&gt;&gt; 磁盘文件（将正常结果输出到磁盘文件）<img src="/archives/shellBasicCommand/%E9%87%8D%E5%AE%9A%E5%90%91%E8%AF%AD%E6%B3%951.png" class="" title="重定向语法">

</li>
</ul>
<h4 id="5-9-2、格式2"><a href="#5-9-2、格式2" class="headerlink" title="5.9.2、格式2"></a>5.9.2、格式2</h4><ul>
<li>命令：2&gt;&gt; 磁盘文件（将错误结果输出到磁盘文件）<img src="/archives/shellBasicCommand/%E9%87%8D%E5%AE%9A%E5%90%91%E8%AF%AD%E6%B3%952.png" class="" title="重定向语法">

</li>
</ul>
<h3 id="5-10、数组"><a href="#5-10、数组" class="headerlink" title="5.10、数组"></a>5.10、数组</h3><p>数组也是变量，但是是特殊的变量，一般变量只能存储一个值，而数组可以存储多个值</p>
<h4 id="5-10-1、数组创建"><a href="#5-10-1、数组创建" class="headerlink" title="5.10.1、数组创建"></a>5.10.1、数组创建</h4><p>变量名=(值1 值2 值3 ……)</p>
<img src="/archives/shellBasicCommand/%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA.png" class="" title="重定向语法">

<h4 id="5-10-2、数组查询"><a href="#5-10-2、数组查询" class="headerlink" title="5.10.2、数组查询"></a>5.10.2、数组查询</h4><ul>
<li><p>${数组名[索引]}   //索引从0开始</p>
<img src="/archives/shellBasicCommand/%E6%9F%A5%E8%AF%A2%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0.png" class="" title="重定向语法">
</li>
<li><p>查询所有元素：${数组名[*]}  或  ${数组名[@]}</p>
<img src="/archives/shellBasicCommand/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0.png" class="" title="查询所有元素">


</li>
</ul>
<ul>
<li>查询元素个数：在查询所有元素基础上，数组名前面加上#<img src="/archives/shellBasicCommand/%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0.png" class="" title="查询元素个数">

</li>
</ul>
<h4 id="5-10-3、数组修改"><a href="#5-10-3、数组修改" class="headerlink" title="5.10.3、数组修改"></a>5.10.3、数组修改</h4><p>变量名[索引]=新值</p>
<img src="/archives/shellBasicCommand/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9.png" class="" title="数组修改">

<h4 id="5-10-4、数组删除"><a href="#5-10-4、数组删除" class="headerlink" title="5.10.4、数组删除"></a>5.10.4、数组删除</h4><p>unset 数组名</p>
<img src="/archives/shellBasicCommand/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png" class="" title="数组删除">

<h4 id="5-10-5、数组应用"><a href="#5-10-5、数组应用" class="headerlink" title="5.10.5、数组应用"></a>5.10.5、数组应用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">#遍历数组</span><br><span class="line">myArr&#x3D;(hello python c c++ java)</span><br><span class="line">for ele in $&#123;myArr[*]&#125;</span><br><span class="line">do</span><br><span class="line">	echo $&#123;ele&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试基础理论知识</title>
    <url>/archives/testTheory.html</url>
    <content><![CDATA[<p>（如有错误请在评论区留言）</p>
<h1 id="一、测试基础"><a href="#一、测试基础" class="headerlink" title="一、测试基础"></a>一、测试基础</h1><h2 id="1、软件测试是什么"><a href="#1、软件测试是什么" class="headerlink" title="1、软件测试是什么"></a>1、软件测试是什么</h2><p>检查软件功能实际结果是否符合预期结果</p>
<h3 id="1-1、软件测试发展历程"><a href="#1-1、软件测试发展历程" class="headerlink" title="1.1、软件测试发展历程"></a>1.1、软件测试发展历程</h3><ul>
<li>第一阶段：软件测试就是证明软件是正确的（eg：qq登录输入正确的密码即对）</li>
<li>第二阶段：软件测试就是证明软件是错误的（eg：考虑到了错误的情况）</li>
<li>第三阶段：软件测试就是保证软件的质量是符合用户需求的一系列手段（软件测试的目的不是为了发现bug而是预防bug）（不仅针对于软件本身，而是针对整个软件开发流程）</li>
</ul>
<h3 id="1-2、软件测试职业前景"><a href="#1-2、软件测试职业前景" class="headerlink" title="1.2、软件测试职业前景"></a>1.2、软件测试职业前景</h3><img src="/archives/testTheory/%E4%B8%80.1.2%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%81%8C%E4%B8%9A%E5%89%8D%E6%99%AF.JPG" class="" title="软件测试职业前景">

<h2 id="2、软件测试分类"><a href="#2、软件测试分类" class="headerlink" title="2、软件测试分类"></a>2、软件测试分类</h2><img src="/archives/testTheory/%E4%B8%80.2%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB.png" class="" title="软件测试分类">
<h3 id="2-1、按是否执行程序分类"><a href="#2-1、按是否执行程序分类" class="headerlink" title="2.1、按是否执行程序分类"></a>2.1、按是否执行程序分类</h3><ul>
<li>静态测试：看文档、看代码、不运行程序</li>
<li>动态测试：实际运行代码</li>
</ul>
<h3 id="2-2、按是否关心内部结构分类"><a href="#2-2、按是否关心内部结构分类" class="headerlink" title="2.2、按是否关心内部结构分类"></a>2.2、按是否关心内部结构分类</h3><ul>
<li>黑盒测试：只关心输入输出数据、不关心内部原理<ul>
<li>功能测试：逻辑、界面、易用性、安装、兼容性</li>
<li>性能测试：一般性能测试、稳定性、负载、压力</li>
</ul>
</li>
<li>白盒测试：查看源代码结构</li>
<li>灰盒测试：黑白结合</li>
</ul>
<h3 id="2-3、按执行过程是否需要人工干预分类"><a href="#2-3、按执行过程是否需要人工干预分类" class="headerlink" title="2.3、按执行过程是否需要人工干预分类"></a>2.3、按执行过程是否需要人工干预分类</h3><ul>
<li>手工测试</li>
<li>自动化测试</li>
</ul>
<h3 id="2-4、按测试阶段分类"><a href="#2-4、按测试阶段分类" class="headerlink" title="2.4、按测试阶段分类"></a>2.4、按测试阶段分类</h3><ul>
<li>单元测试：方法、函数、类</li>
<li>集成测试：测接口</li>
<li>系统测试：功能、安全、性能、兼容性（同一WEB网站在不同浏览器、同一app在不同型号手机）、易用性、稳定性（软件一直使用是否会崩溃）、UI</li>
<li>验收测试（α、β、γ）</li>
</ul>
<h3 id="2-5、按测试方向分类"><a href="#2-5、按测试方向分类" class="headerlink" title="2.5、按测试方向分类"></a>2.5、按测试方向分类</h3><ul>
<li>功能测试：测试功能（逻辑、界面、易用性、安装、兼容性）。功能测试不是黑盒测试，黑、白、灰三种都能测，只是通常用黑盒测试</li>
<li>性能测试：测试性能能够做多好<ul>
<li>压力测试：发现软件性能瓶颈</li>
<li>负载测试：持续高强度工作能维持多长时间</li>
<li>并发测试：防止多人同时做一件事出错</li>
</ul>
</li>
<li>安全测试</li>
</ul>
<h3 id="2-5、其他分类"><a href="#2-5、其他分类" class="headerlink" title="2.5、其他分类"></a>2.5、其他分类</h3><ul>
<li>冒烟测试：非正式测试流程，测试前的测试。整体测流程，不能一开始就出现问题。大概检查软件是否具备可测试性，功能的完成程度（冒烟测试主要采用场景法）</li>
<li>回归测试：测试完后，把bug给开发修改后，再测试bug是否修复。若a有问题，修改后相关联的bcd还要再测一遍</li>
<li>随机测试：测试重点模块或之前出过问题的模块</li>
<li>验收测试<ul>
<li>α（内测）：内部人员或少量用户测试，此阶段解决严重问题</li>
<li>β（公测）：用户免费使用，根据用户反馈修复软件细节</li>
<li>γ（准正式版）：跟正式版几乎一样</li>
</ul>
</li>
</ul>
<h2 id="3、互联网公司的结构组成"><a href="#3、互联网公司的结构组成" class="headerlink" title="3、互联网公司的结构组成"></a>3、互联网公司的结构组成</h2><ul>
<li>项目经理：负责整个项目的管理</li>
<li>产品经理：负责软件的需求收集设计等等</li>
<li>开发：前端/后端</li>
<li>测试：测试</li>
<li>运维：负责硬件网络设备的维护和管理</li>
<li>运营：产品完成后靠运营去拉用户</li>
<li>设计：负责对软件的UI进行设计</li>
</ul>
<h2 id="4、软件测试和软件质量的关系"><a href="#4、软件测试和软件质量的关系" class="headerlink" title="4、软件测试和软件质量的关系"></a>4、软件测试和软件质量的关系</h2><p>软件测试就是保证软件质量是符合用户需求的一系列手段</p>
<h1 id="二、测试方法"><a href="#二、测试方法" class="headerlink" title="二、测试方法"></a>二、测试方法</h1><h2 id="1、软件测试的方法"><a href="#1、软件测试的方法" class="headerlink" title="1、软件测试的方法"></a>1、软件测试的方法</h2><h3 id="1-1、等价类划分法"><a href="#1-1、等价类划分法" class="headerlink" title="1.1、等价类划分法"></a>1.1、等价类划分法</h3><p>把无法穷举的数据分类书写</p>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>按照需求写出有效等价类</li>
<li>根据需求取反，写出一部分无效等价类</li>
<li>找到特殊情况的无效等价类（中文、英文、空格、空、符号、小数；根据需求来选择）</li>
</ol>
<ul>
<li><strong>总结</strong>：输入长度、组成组合（字母+英文）、输入类型、是否为空、是否区分大小写（根据需求来定，一般都会区分大小写）、空格问题（程序中文字的最前和最后部分的空格，程序员喜欢清除，文字中间的空格会保留）</li>
<li>注意事项</li>
</ul>
<ol>
<li>一般是一个框输入正确的值，一个框输入错误的值，没有两个框都输入错误的值，因为更容易确定到底是哪个框出现错误的值</li>
<li>登录名、昵称要注意和谐词、敏感词</li>
</ol>
<h3 id="1-2、等价类划分法练习"><a href="#1-2、等价类划分法练习" class="headerlink" title="1.2、等价类划分法练习"></a>1.2、等价类划分法练习</h3><h4 id="1-2-1、练习1"><a href="#1-2-1、练习1" class="headerlink" title="1.2.1、练习1"></a>1.2.1、练习1</h4><ul>
<li>计算1-100的两个整数之和（包括1和100）<img src="/archives/testTheory/%E4%BA%8C.1.2.1%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86%E7%BB%83%E4%B9%A01.png" class="" title="等价类划分练习">

</li>
</ul>
<h4 id="1-2-2、练习2"><a href="#1-2-2、练习2" class="headerlink" title="1.2.2、练习2"></a>1.2.2、练习2</h4><ul>
<li>某城市电话号码由三部分组成，分别是，地区码：空白或是3位数字；前缀：非0且非1开头的三位数字；后缀：4位数字。<img src="/archives/testTheory/%E4%BA%8C.1.2.2%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86%E7%BB%83%E4%B9%A02.png" class="" title="等价类划分练习">

</li>
</ul>
<h4 id="1-2-3、练习3"><a href="#1-2-3、练习3" class="headerlink" title="1.2.3、练习3"></a>1.2.3、练习3</h4><ul>
<li>用户名（昵称）长度为3-19：以字母开头；登录名称：非空；密码：非空；确认密码：值和密码相同。<img src="/archives/testTheory/%E4%BA%8C.1.2.3%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86%E7%BB%83%E4%B9%A03.png" class="" title="等价类划分练习">

</li>
</ul>
<h3 id="1-2、边界值与等价类"><a href="#1-2、边界值与等价类" class="headerlink" title="1.2、边界值与等价类"></a>1.2、边界值与等价类</h3><p>通过等价类思想可以找到有效和无效的内容，再通过边界值思想把测试用例具体化；<strong>边界值是配合等价类思想使用的</strong><br>边界值：比边界大一点、和小一点的值都要测试到位</p>
<h3 id="1-3、因果图制作判定表"><a href="#1-3、因果图制作判定表" class="headerlink" title="1.3、因果图制作判定表"></a>1.3、因果图制作判定表</h3><ul>
<li>步骤</li>
</ul>
<ol>
<li>找到所有的条件桩（输入条件）和动作桩（预期结果），把具体的条件项（所有输入的条件）和所有输出的条件（动作项）填写进去</li>
<li>得到初始表格后，根据实际需求进行简化（使用”-”来代表此选项，选择任意结果都不会影响最后结论）。（补充：实际情况最好不简化，因为测试的时候还是要一个一个来测试，简化没用）</li>
</ol>
<ul>
<li>注意事项</li>
</ul>
<ol>
<li>等价类是用来分析单个输入条件输入域的情况的，边界值是在等价类基础上补充测试用例的，侧边界。</li>
<li>判定表是用来解决<strong>条件组合</strong>的</li>
</ol>
<h3 id="1-4、因果图制作判定表练习"><a href="#1-4、因果图制作判定表练习" class="headerlink" title="1.4、因果图制作判定表练习"></a>1.4、因果图制作判定表练习</h3><h4 id="1-4-1、练习1"><a href="#1-4-1、练习1" class="headerlink" title="1.4.1、练习1"></a>1.4.1、练习1</h4><img src="/archives/testTheory/%E4%BA%8C.1.4.1%E5%9B%A0%E6%9E%9C%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%88%A4%E5%AE%9A%E8%A1%A8%E7%BB%83%E4%B9%A01%E9%A2%98%E7%9B%AE.png" class="" title="因果图制作判定表练习">
<img src="/archives/testTheory/%E4%BA%8C.1.4.1%E5%9B%A0%E6%9E%9C%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%88%A4%E5%AE%9A%E8%A1%A8%E7%BB%83%E4%B9%A01%E8%A7%A3%E7%AD%94.png" class="" title="因果图制作判定表练习">

<h3 id="1-5、场景法"><a href="#1-5、场景法" class="headerlink" title="1.5、场景法"></a>1.5、场景法</h3><p>用户在使用这个功能时会怎么做。<br>基本流：正确的业务流程<br>备选流：有问题的业务流程<br>测试用例的书写：只需要把需求文档的每一条当作一个测试用例即可</p>
<h3 id="1-5-1、场景法使用场景"><a href="#1-5-1、场景法使用场景" class="headerlink" title="1.5.1、场景法使用场景"></a>1.5.1、场景法使用场景</h3><p>冒烟测试, 系统测试。<br>先使用场景法测主要功能和业务流程是否正确，没问题后再用边界值等价类等方法测试。</p>
<h3 id="1-6、场景法练习"><a href="#1-6、场景法练习" class="headerlink" title="1.6、场景法练习"></a>1.6、场景法练习</h3><h4 id="1-6-1练习1"><a href="#1-6-1练习1" class="headerlink" title="1.6.1练习1"></a>1.6.1练习1</h4><img src="/archives/testTheory/%E4%BA%8C.1.6.1%E5%9C%BA%E6%99%AF%E6%B3%95%E7%BB%83%E4%B9%A01%E9%A2%98%E7%9B%AE.JPG" class="" title="场景法练习">
<img src="/archives/testTheory/%E4%BA%8C.1.6.1%E5%9C%BA%E6%99%AF%E6%B3%95%E7%BB%83%E4%B9%A01%E8%A7%A3%E7%AD%94.JPG" class="" title="场景法练习">

<h3 id="1-7、流程分析法"><a href="#1-7、流程分析法" class="headerlink" title="1.7、流程分析法"></a>1.7、流程分析法</h3><p>测试用例必须包含所有的分支条件，每一个分支条件就是一条测试用例</p>
<img src="/archives/testTheory/%E4%BA%8C.1.7%E6%B5%81%E7%A8%8B%E6%B3%95.JPG" class="" title="流程法">
<h4 id="1-7-1、场景法和流程法使用场景"><a href="#1-7-1、场景法和流程法使用场景" class="headerlink" title="1.7.1、场景法和流程法使用场景"></a>1.7.1、场景法和流程法使用场景</h4><p><strong>有分支的就用流程法</strong></p>
<h3 id="1-8、错误推断法"><a href="#1-8、错误推断法" class="headerlink" title="1.8、错误推断法"></a>1.8、错误推断法</h3><p>当时间紧任务急的时候，测试时间较少，可以考虑使用错误推断法来设计测试用例<br>根据测试人员以往项目的经验来设计；<br>已经经过了几轮测试后，这时候也可以使用推断法进行测试用例的补充</p>
<h4 id="1-8-1、错误推断法使用场景"><a href="#1-8-1、错误推断法使用场景" class="headerlink" title="1.8.1、错误推断法使用场景"></a>1.8.1、错误推断法使用场景</h4><p>一是时间紧任务重，二是已经测过几轮了，再根据经验添加测试用例</p>
<h3 id="1-9、正交表"><a href="#1-9、正交表" class="headerlink" title="1.9、正交表"></a>1.9、正交表</h3><ul>
<li>当要测试的内容，需要排列组合的情况非常多的时候，我们要考虑使用科学的方法来减少测试用例的个数，这个方法就是正交表</li>
<li>特点：特点：<strong>均匀分散、齐整可比</strong>（所有情况都应该均匀的被测试过一次）</li>
<li>正常正交表、混合正交表</li>
</ul>
<h4 id="1-9-1、正交表使用步骤"><a href="#1-9-1、正交表使用步骤" class="headerlink" title="1.9.1、正交表使用步骤"></a>1.9.1、正交表使用步骤</h4><ul>
<li>因素：控件的个数</li>
<li>水平：控件里面的可选项个数</li>
</ul>
<ol>
<li>先确定几因素，几水平</li>
<li>在“常用正交表”中找到合适的表格</li>
<li>复制找到的表格到我们自己的表格中</li>
<li>自己再写一个对照表（所有的控件和对应的选项列出来）</li>
<li>把复制过来的表格和对照表实现映射关系，就可以得到最终的正交表（测试用例）<img src="/archives/testTheory/%E4%BA%8C.1.9.1%E6%AD%A3%E4%BA%A4%E8%A1%A8.JPG" class="" title="Shell输出">

</li>
</ol>
<h4 id="1-9-2、注意事项"><a href="#1-9-2、注意事项" class="headerlink" title="1.9.2、注意事项"></a>1.9.2、注意事项</h4><p>如果没有找到合适的正交表，只需要在表格中找到多一些的正交表，把多余的内容删除即可</p>
<h4 id="1-9-3、正交设计助手软件"><a href="#1-9-3、正交设计助手软件" class="headerlink" title="1.9.3、正交设计助手软件"></a>1.9.3、正交设计助手软件</h4><ol>
<li><img src="/archives/testTheory/%E4%BA%8C.1.9.3%E6%AD%A3%E4%BA%A4%E8%BD%AF%E4%BB%B61.png" class="" title="正交软件"></li>
<li><img src="/archives/testTheory/%E4%BA%8C.1.9.3%E6%AD%A3%E4%BA%A4%E8%BD%AF%E4%BB%B62.png" class="" title="正交软件"></li>
<li>每个都要填写完整 <img src="/archives/testTheory/%E4%BA%8C.1.9.3%E6%AD%A3%E4%BA%A4%E8%BD%AF%E4%BB%B63.png" class="" title="正交软件"></li>
<li>rtf是word文档、csv是Excel<img src="/archives/testTheory/%E4%BA%8C.1.9.3%E6%AD%A3%E4%BA%A4%E8%BD%AF%E4%BB%B64.png" class="" title="正交软件">

</li>
</ol>
<h4 id="1-9-4、allpairs混合正交工具"><a href="#1-9-4、allpairs混合正交工具" class="headerlink" title="1.9.4、allpairs混合正交工具"></a>1.9.4、allpairs混合正交工具</h4><ul>
<li>如果在工作中找不到正常的正交表，就要使用混合正交表来实现测试用例的书写；<br>使用场景：正常正交表使用（正交设计助手—方便）；混合正交表（allpairs可以制作正常正交表，也可以做混合的，但是不方便）</li>
<li>步骤</li>
</ul>
<ol>
<li>使用Excel制作对照表（不要写编号）<img src="/archives/testTheory/%E4%BA%8C.1.9.4allpairs%E6%B7%B7%E5%90%88%E6%AD%A3%E4%BA%A4%E5%B7%A5%E5%85%B7%E5%AF%B9%E7%85%A7%E8%A1%A8.png" class="" title="allpairs混合正交工具对照表"></li>
<li>复制表格中的所有数据放在一个txt文本中</li>
<li>把此txt文档放在allpairs文件夹中</li>
<li>Win+R 输入cmd 打开命令行窗口</li>
<li>找到工具所在的文件夹（盘符:   cd 具体文件夹路径）</li>
<li><code>allpairs.exe ren.txt&gt;ren_chenggong.txt</code> 输入此行代码即可（ren.txt就是我们复制过来的文本文件；ren_chenggong.txt存放的就是最终结果，不用事先建立好）</li>
<li>找到最终建立好的txt文件，打开后，复制第一大段内容到Excel表格中（如果遇到”-”或者”~”代表此选项随意选择，我们根据齐整可比理论，均匀选择即可）</li>
</ol>
<h3 id="1-10、正交表练习"><a href="#1-10、正交表练习" class="headerlink" title="1.10、正交表练习"></a>1.10、正交表练习</h3><h4 id="1-10-1、练习1"><a href="#1-10-1、练习1" class="headerlink" title="1.10.1、练习1"></a>1.10.1、练习1</h4><ul>
<li>窗体中有多个控件（字体、字符样式、颜色、字号），每个控件有多个取值，<br>字体：仿宋、楷体、华文彩云<br>字符样式：粗体、斜体、下划线<br>颜色：红色、绿色、蓝色<br>字号：20号、30号、40号</li>
<li>步骤</li>
</ul>
<ol>
<li>4因素，3水平</li>
<li>找到合适的表格并复制到自己表格中<img src="/archives/testTheory/%E4%BA%8C.1.10.1%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A01%E6%AD%A3%E4%BA%A4%E8%A1%A8.png" class="" title="正交表练习"></li>
<li>对照表<img src="/archives/testTheory/%E4%BA%8C.1.10.1%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A01%E5%AF%B9%E7%85%A7%E8%A1%A8.png" class="" title="正交表练习"></li>
<li>测试用例（这是进行测试的最少量组合，但是在测试中有81-9=72种组合没有测试到。如果时间允许应该再补充一些用例，因为遗漏的组合越多，存在缺陷的可能性就越大）<img src="/archives/testTheory/%E4%BA%8C.1.10.1%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A01%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" class="" title="正交表练习1测试用例">

</li>
</ol>
<h4 id="1-10-2、练习2"><a href="#1-10-2、练习2" class="headerlink" title="1.10.2、练习2"></a>1.10.2、练习2</h4><img src="/archives/testTheory/%E4%BA%8C.1.10.2%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A02%E9%A2%98%E7%9B%AE.png" class="" title="正交表练习2题目">
<ul>
<li>步骤</li>
</ul>
<ol>
<li>5因素，2水平（5个控件，每个控件2个可选项，写和不写）</li>
<li>找到合适的正交表，没有5因素2水平，就用最接近的7因素2水平<img src="/archives/testTheory/%E4%BA%8C.1.10.2%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A02%E6%AD%A3%E4%BA%A4%E8%A1%A8.png" class="" title="正交表练习2正交表">
把最后两列删除</li>
<li>对照表<img src="/archives/testTheory/%E4%BA%8C.1.10.2%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A02%E5%AF%B9%E7%85%A7%E8%A1%A8.png" class="" title="正交表练习2对照表"></li>
<li>测试用例<img src="/archives/testTheory/%E4%BA%8C.1.10.2%E6%AD%A3%E4%BA%A4%E8%A1%A8%E7%BB%83%E4%B9%A02%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" class="" title="正交表练习2测试用例">

</li>
</ol>
<h2 id="2、软件测试模型"><a href="#2、软件测试模型" class="headerlink" title="2、软件测试模型"></a>2、软件测试模型</h2><h3 id="2-1、V模型"><a href="#2-1、V模型" class="headerlink" title="2.1、V模型"></a>2.1、V模型</h3><p>测试与开发工作对应，工作有所依据</p>
<img src="/archives/testTheory/%E4%BA%8C.2.1V%E6%A8%A1%E5%9E%8B.png" class="" title="V模型">

<ul>
<li>需求分析（产品经理）：用户需求、业务需求、需求规格说明书</li>
<li>概要设计（架构师）：系统架构、模块划分、模块与模块之间的接口</li>
<li>详细设计（UI绘制psd）：模块内部实现的逻辑和方法</li>
<li>编码：实现上面的设计</li>
<li>单元测试：独立的模块测试，检验代码是否符合详细设计的要求</li>
<li>集成测试：模块联调，检验此前测试过的各组成部分是否能完好的结合到一起</li>
<li>系统测试：把系统整体流程跑一遍，检测已集成在一起的产品是否符合系统规格说明书的要求</li>
<li>验收测试：检测产品是否符合最终用户的需求，不满足在用户的需求再迭代<h4 id="2-1-1、V模型优缺点"><a href="#2-1-1、V模型优缺点" class="headerlink" title="2.1.1、V模型优缺点"></a>2.1.1、V模型优缺点</h4></li>
<li>优点：包含了底层测试（单元测试）和高层测试（系统测试）；阶段划分清晰，方便工作的整体把控</li>
<li>缺点：测试阶段比较靠后，之前的的问题已经产生，修改不方便；v模型就是瀑布模型的变种，如果需求发生变化，必然要返工</li>
<li>V模型改良：像瀑布模型那样，细化各个阶段，每个部分进行小型迭代。软件测试从需求分析阶段就进来，参与需求评审，产出测试大纲。根据概要设计和详细设计产出测试用例。开发人员交付代码后执行测试。<h3 id="2-2、W模型"><a href="#2-2、W模型" class="headerlink" title="2.2、W模型"></a>2.2、W模型</h3>开发一个v，测试一个v，开发和测试并行<img src="/archives/testTheory/%E4%BA%8C.2.2W%E6%A8%A1%E5%9E%8B.jpg" class="" title="W模型">

</li>
</ul>
<h4 id="2-2-1、W模型优缺点"><a href="#2-2-1、W模型优缺点" class="headerlink" title="2.2.1、W模型优缺点"></a>2.2.1、W模型优缺点</h4><ul>
<li>优点：<strong>开发测试并行</strong>，需求和设计一样要进行测试；尽早的介入测试，会更早的发现问题，降低修复成本；阶段依然明显，方便整体流程把控</li>
<li>缺点：代码依然在测试之前，不方便代码的测试工作；如果没有文档，根本无法进行w模型；对于人员要求较高</li>
<li>适合中大型企业，有专业产品经理产出文档，对测试人员要求也高，要有多个项目经验，对项目文档提出意见</li>
</ul>
<h3 id="2-3、瀑布模型"><a href="#2-3、瀑布模型" class="headerlink" title="2.3、瀑布模型"></a>2.3、瀑布模型</h3>















]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
